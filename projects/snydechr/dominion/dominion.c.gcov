        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
function compareGameState called 0 returned 0% blocks executed 0%
    #####:    9:int compareGameState(struct gameState game1, struct gameState game2)
        -:   10:{
        -:   11:
    #####:   12:	int same = 0;
    #####:   13:	if(	game1.numPlayers != game2.numPlayers)
branch  0 never executed
branch  1 never executed
    #####:   14:		same++;
        -:   15:	
    #####:   16:}
function comparePlayerState called 80 returned 100% blocks executed 72%
       80:   17:int comparePlayerState(struct gameState *game1, struct gameState *game2, int player)
        -:   18:{
       80:   19:	int notSame = 0;
        -:   20:	int i, j;
       80:   21:	if(game1->handCount[player] != game2->handCount[player])
branch  0 taken 0 (fallthrough)
branch  1 taken 80
        -:   22:	{
    #####:   23:		notSame++;
    #####:   24:		printf("---- handCount difference ----");
call    0 never executed
        -:   25:	}
        -:   26:
       80:   27:	if(game1->deckCount[player] != game2->deckCount[player])
branch  0 taken 0 (fallthrough)
branch  1 taken 80
        -:   28:	{
    #####:   29:		notSame++;
    #####:   30:		printf("---- deckCount difference ----");
call    0 never executed
        -:   31:
        -:   32:	}
        -:   33:
       80:   34:	if(game1->discardCount[player] != game2->discardCount[player])
branch  0 taken 0 (fallthrough)
branch  1 taken 80
        -:   35:	{
    #####:   36:		notSame++;
    #####:   37:		printf("---- discardCount difference ----");
call    0 never executed
        -:   38:
        -:   39:	}
       80:   40:	for(i = 0;i < MAX_HAND; i++)
branch  0 taken 40000
branch  1 taken 80 (fallthrough)
        -:   41:	{
        -:   42:		if(game1->hand[player] != game2->hand[player])
        -:   43:		{
        -:   44:			//notSame++;
        -:   45:			//printf("---- hand difference ----");
        -:   46:		}
        -:   47:	}
        -:   48:
    40080:   49:	for(j = 0; j < MAX_DECK; j++)
branch  0 taken 40000
branch  1 taken 80 (fallthrough)
        -:   50:	{
    40000:   51:		if(game1->deck[player][j] != game2->deck[player][j])
branch  0 taken 0 (fallthrough)
branch  1 taken 40000
        -:   52:		{
    #####:   53:			notSame++;
    #####:   54:			printf("---- deck difference ----");
call    0 never executed
        -:   55:		}
    40000:   56:		if(game1->discard[player][j] != game2->discard[player][j])
branch  0 taken 0 (fallthrough)
branch  1 taken 40000
        -:   57:		{
    #####:   58:			notSame++;
    #####:   59:			printf("---- discard difference ----");
call    0 never executed
        -:   60:		}
        -:   61:	}
        -:   62:
       80:   63:	return notSame;
        -:   64:}
function copyGameState called 36 returned 100% blocks executed 100%
       36:   65:void copyGameState(struct gameState *game1, struct gameState *game2)
        -:   66:{
        -:   67:	int i, j, k, l, m, n, o, p, q;
       36:   68:	game2->numPlayers = game1->numPlayers;
     1008:   69:	for(i = 0; i < (treasure_map+1); i++)
branch  0 taken 972
branch  1 taken 36 (fallthrough)
        -:   70:	{
      972:   71:		game2->supplyCount[i] = game1->supplyCount[i];
      972:   72:		game2->embargoTokens[i] = game1->embargoTokens[i]; 
        -:   73:
        -:   74:	}
      180:   75:	for(j = 0; j < (MAX_PLAYERS); j++)
branch  0 taken 144
branch  1 taken 36 (fallthrough)
        -:   76:	{
      144:   77:		game2->handCount[j] = game1->handCount[j];
      144:   78:		game2->deckCount[j] = game1->deckCount[j];
      144:   79:		game2->discardCount[j] = game1->discardCount[j];
    72144:   80:		for(k = 0; k < MAX_DECK; k++)
branch  0 taken 72000
branch  1 taken 144 (fallthrough)
        -:   81:		{
    72000:   82:			game2->deck[j][k] = game1->deck[j][k];
    72000:   83:			game2->discard[j][k] = game1->discard[j][k];
    72000:   84:			if(j == (MAX_PLAYERS - 1))
branch  0 taken 18000 (fallthrough)
branch  1 taken 54000
    18000:   85:				game2->playedCards[k] = game1->playedCards[k];
        -:   86:		}
    72144:   87:		for(l = 0; l < MAX_HAND; l++)
branch  0 taken 72000
branch  1 taken 144 (fallthrough)
        -:   88:		{
    72000:   89:			game2->hand[j][l] = game1->hand[j][l];
        -:   90:
        -:   91:		}
        -:   92:	}
       36:   93:	game2->outpostPlayed = game1->outpostPlayed;
       36:   94:	game2->outpostTurn = game1->outpostTurn;
       36:   95:	game2->whoseTurn = game1->whoseTurn;
       36:   96:	game2->phase = game1->phase;
       36:   97:	game2->numActions = game1->numActions;
       36:   98:	game2->coins = game1->coins;
       36:   99:	game2->numBuys = game1->numBuys;
       36:  100:	game2->playedCardCount = game1->playedCardCount;
       36:  101:}
        -:  102:
function cardName called 35803 returned 100% blocks executed 100%
    35803:  103:char* cardName(int cardIndex)
        -:  104:{
        -:  105:	char currentCard[50];
        -:  106:
    35803:  107:	switch( cardIndex ) 
branch  0 taken 1326
branch  1 taken 1326
branch  2 taken 1326
branch  3 taken 1326
branch  4 taken 1326
branch  5 taken 1326
branch  6 taken 1326
branch  7 taken 1326
branch  8 taken 1326
branch  9 taken 1326
branch 10 taken 1326
branch 11 taken 1326
branch 12 taken 1326
branch 13 taken 1326
branch 14 taken 1326
branch 15 taken 1326
branch 16 taken 1326
branch 17 taken 1326
branch 18 taken 1326
branch 19 taken 1326
branch 20 taken 1326
branch 21 taken 1326
branch 22 taken 1326
branch 23 taken 1326
branch 24 taken 1326
branch 25 taken 1326
branch 26 taken 1326
branch 27 taken 1
branch 28 taken 0
        -:  108:	{
        -:  109:		case curse:		//card 1
     1326:  110:		  strcpy(currentCard, "curse");
     1326:  111:		  break;
        -:  112:		case estate:	//card 2
     1326:  113:		  strcpy(currentCard, "estate");
     1326:  114:		  break;
        -:  115:		case duchy:		//card 3
     1326:  116:		  strcpy(currentCard, "duchy");
     1326:  117:		  break;
        -:  118:		case province:	//card 4
     1326:  119:		  strcpy(currentCard, "province");
     1326:  120:		  break;
        -:  121:		case copper:	//card 5
     1326:  122:		  strcpy(currentCard, "copper");
     1326:  123:		  break;
        -:  124:		case silver:	//card 6
     1326:  125:		  strcpy(currentCard, "silver");
     1326:  126:		  break;
        -:  127:		case gold:		//card 7
     1326:  128:		  strcpy(currentCard, "gold");
     1326:  129:		  break;
        -:  130:		case adventurer://card 8
     1326:  131:		  strcpy(currentCard, "adventurer");
     1326:  132:		  break;
        -:  133:		case council_room://card 9
     1326:  134:		  strcpy(currentCard, "council_room");
     1326:  135:		  break;
        -:  136:		case feast:		//card 10
     1326:  137:		  strcpy(currentCard, "feast");
     1326:  138:		  break;
        -:  139:		case gardens:	//card 11
     1326:  140:		  strcpy(currentCard, "gardens");
     1326:  141:		  break;
        -:  142:		case mine:		//card 12
     1326:  143:		  strcpy(currentCard, "mine");
     1326:  144:		  break;
        -:  145:		case remodel:	//card 13
     1326:  146:		  strcpy(currentCard, "remodel");
     1326:  147:		  break;
        -:  148:		case smithy:	//card 14
     1326:  149:		  strcpy(currentCard, "smithy");
     1326:  150:		  break;
        -:  151:		case village:	//card 15
     1326:  152:		  strcpy(currentCard, "village");
     1326:  153:		  break;
        -:  154:		case baron:		//card 16
     1326:  155:		  strcpy(currentCard, "baron");
     1326:  156:		  break;
        -:  157:		case great_hall://card 17
     1326:  158:		  strcpy(currentCard, "great_hall");
     1326:  159:		  break;
        -:  160:		case minion:	//card 18
     1326:  161:		  strcpy(currentCard, "minion");
     1326:  162:		  break;
        -:  163:		case steward:	//card 19
     1326:  164:		  strcpy(currentCard, "steward");
     1326:  165:		  break;
        -:  166:		case tribute:	//card 20
     1326:  167:		  strcpy(currentCard, "tribute");
     1326:  168:		  break;
        -:  169:		case ambassador://card 21
     1326:  170:		  strcpy(currentCard, "ambassador");
     1326:  171:		  break;
        -:  172:		case cutpurse:	//card 22
     1326:  173:		  strcpy(currentCard, "cutpurse");
     1326:  174:		  break;
        -:  175:		case embargo: 	//card 23
     1326:  176:		  strcpy(currentCard, "embargo");
     1326:  177:		  break;
        -:  178:		case outpost:	//card 24
     1326:  179:		  strcpy(currentCard, "outpost");
     1326:  180:		  break;
        -:  181:		case salvager:	//card 25
     1326:  182:		  strcpy(currentCard, "salvager"); 
     1326:  183:		  break;
        -:  184:		case sea_hag:	//card 26
     1326:  185:		  strcpy(currentCard, "sea_hag");
     1326:  186:		  break;
        -:  187:		case treasure_map://card 27
     1326:  188:		  strcpy(currentCard, "treasure_map");
     1326:  189:		  break;
        -:  190:		case 27: 
        1:  191:			strcpy(currentCard, "out of bounds card");
        1:  192:			break;
        -:  193:	}
    35803:  194:	return currentCard;
        -:  195:}
        -:  196:
function compare called 95265 returned 100% blocks executed 83%
    95265:  197:int compare(const void* a, const void* b) 
        -:  198:{
    95265:  199:	if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 95265
    #####:  200:		return 1;
    95265:  201:	if (*(int*)a < *(int*)b)
branch  0 taken 25404 (fallthrough)
branch  1 taken 69861
    25404:  202:		return -1;
    69861:  203:	return 0;
        -:  204:}
        -:  205:
function newGame called 0 returned 0% blocks executed 0%
    #####:  206:struct gameState* newGame() 
        -:  207:{
    #####:  208:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:  209:	return g;
        -:  210:}
        -:  211:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:  212:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8, int k9, int k10) 
        -:  213:{
    #####:  214:	int* k = malloc(10 * sizeof(int));
    #####:  215:	k[0] = k1;
    #####:  216:	k[1] = k2;
    #####:  217:	k[2] = k3;
    #####:  218:	k[3] = k4;
    #####:  219:	k[4] = k5;
    #####:  220:	k[5] = k6;
    #####:  221:	k[6] = k7;
    #####:  222:	k[7] = k8;
    #####:  223:	k[8] = k9;
    #####:  224:	k[9] = k10;
    #####:  225:	return k;
        -:  226:}
        -:  227:
function initializeGame called 2003 returned 100% blocks executed 97%
     2003:  228:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) 
        -:  229:{
        -:  230:
        -:  231:	int i;
        -:  232:	int j;
        -:  233:	int it;			
        -:  234:	//set up random number generator
     2003:  235:	SelectStream(1);
call    0 returned 2003
     2003:  236:	PutSeed((long)randomSeed);
call    0 returned 2003
        -:  237:
        -:  238:	//check number of players
     2003:  239:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 2003 (fallthrough)
branch  1 taken 0
branch  2 taken 32 (fallthrough)
branch  3 taken 1971
        -:  240:	{
       32:  241:		return -1;
        -:  242:	}
        -:  243:
        -:  244:	//set number of players
     1971:  245:	state->numPlayers = numPlayers;
        -:  246:	//printf("numPlayers: %d\n", state->numPlayers);
        -:  247:
        -:  248:	//check selected kingdom cards are different
    21681:  249:	for (i = 0; i < 10; i++)
branch  0 taken 19710
branch  1 taken 1971 (fallthrough)
        -:  250:	{
   216810:  251:		for (j = 0; j < 10; j++)
branch  0 taken 197100
branch  1 taken 19710 (fallthrough)
        -:  252:		{
   197100:  253:			if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 177390 (fallthrough)
branch  1 taken 19710
branch  2 taken 0 (fallthrough)
branch  3 taken 177390
        -:  254:			{
    #####:  255:				return -1;
        -:  256:			}
        -:  257:		}
        -:  258:	}
        -:  259:
        -:  260:
        -:  261:	//initialize supply
        -:  262:	///////////////////////////////
        -:  263:
        -:  264:	//set number of Curse cards
     1971:  265:	if (numPlayers == 2)
branch  0 taken 438 (fallthrough)
branch  1 taken 1533
        -:  266:	{
      438:  267:		state->supplyCount[curse] = 10;
        -:  268:	}
     1533:  269:	else if (numPlayers == 3)
branch  0 taken 657 (fallthrough)
branch  1 taken 876
        -:  270:	{
      657:  271:		state->supplyCount[curse] = 20;
        -:  272:	}
        -:  273:	else
        -:  274:	{
      876:  275:		state->supplyCount[curse] = 30;
        -:  276:	}
        -:  277:
        -:  278:	//set number of Victory cards
     1971:  279:	if (numPlayers == 2)
branch  0 taken 438 (fallthrough)
branch  1 taken 1533
        -:  280:	{
      438:  281:		state->supplyCount[estate] = 8;
      438:  282:		state->supplyCount[duchy] = 8;
      438:  283:		state->supplyCount[province] = 8;
        -:  284:	}
        -:  285:	else
        -:  286:	{
     1533:  287:		state->supplyCount[estate] = 12;
     1533:  288:		state->supplyCount[duchy] = 12;
     1533:  289:		state->supplyCount[province] = 12;
        -:  290:	}
        -:  291:
        -:  292:	//set number of Treasure cards
     1971:  293:	state->supplyCount[copper] = 60 - (7 * numPlayers);
     1971:  294:	state->supplyCount[silver] = 40;
     1971:  295:	state->supplyCount[gold] = 30;
        -:  296:
        -:  297:	//set number of Kingdom cards
    41391:  298:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 39420
branch  1 taken 1971 (fallthrough)
        -:  299:	{
   325215:  300:		for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 305505
branch  1 taken 19710 (fallthrough)
        -:  301:		{
   305505:  302:			if (kingdomCards[j] == i)
branch  0 taken 19710 (fallthrough)
branch  1 taken 285795
        -:  303:			{
        -:  304:				//check if card is a 'Victory' Kingdom card
    19710:  305:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 17739 (fallthrough)
branch  1 taken 1971
branch  2 taken 1971 (fallthrough)
branch  3 taken 15768
        -:  306:				{
     7884:  307:					if (numPlayers == 2)
branch  0 taken 876 (fallthrough)
branch  1 taken 3066
        -:  308:					{ 
      876:  309:						state->supplyCount[i] = 8; 
        -:  310:					}
        -:  311:					else
        -:  312:					{ 
     3066:  313:						state->supplyCount[i] = 12; 
        -:  314:					}
        -:  315:				}	
        -:  316:				else
        -:  317:				{
    15768:  318:			  		state->supplyCount[i] = 10;
        -:  319:				}
    19710:  320:			  	break;
        -:  321:			}
        -:  322:		  	else    //card is not in the set choosen for the game
        -:  323:			{
   285795:  324:				state->supplyCount[i] = -1;
        -:  325:			}
        -:  326:		}
        -:  327:
        -:  328:	}
        -:  329:
        -:  330:	////////////////////////
        -:  331:	//supply intilization complete
        -:  332:
        -:  333:	//set player decks
     8322:  334:	for (i = 0; i < numPlayers; i++)
branch  0 taken 6351
branch  1 taken 1971 (fallthrough)
        -:  335:	{
     6351:  336:		state->deckCount[i] = 0;
    25404:  337:	  	for (j = 0; j < 3; j++)
branch  0 taken 19053
branch  1 taken 6351 (fallthrough)
        -:  338:		{
    19053:  339:	  		state->deck[i][j] = estate;
    19053:  340:	  		state->deckCount[i]++;
        -:  341:		}
    50808:  342:	  	for (j = 3; j < 10; j++)
branch  0 taken 44457
branch  1 taken 6351 (fallthrough)
        -:  343:		{
    44457:  344:	  		state->deck[i][j] = copper;
    44457:  345:	  		state->deckCount[i]++;		
        -:  346:		}
        -:  347:	}
        -:  348:
        -:  349:	//shuffle player decks
     8322:  350:	for (i = 0; i < numPlayers; i++)
branch  0 taken 6351
branch  1 taken 1971 (fallthrough)
        -:  351:	{
     6351:  352:	  	if ( shuffle(i, state) < 0 )
call    0 returned 6351
branch  1 taken 0 (fallthrough)
branch  2 taken 6351
        -:  353:		{	
    #####:  354:	  	return -1;
        -:  355:		}
        -:  356:	}
        -:  357:
        -:  358:	//draw player hands
     8322:  359:	for (i = 0; i < numPlayers; i++)
branch  0 taken 6351
branch  1 taken 1971 (fallthrough)
        -:  360:	{  
        -:  361:	  	//initialize hand size to zero
     6351:  362:	  	state->handCount[i] = 0;
     6351:  363:	  	state->discardCount[i] = 0;
        -:  364:	  	//draw 5 cards
        -:  365:	  	// for (j = 0; j < 5; j++)
        -:  366:	  	//	{
        -:  367:	  	//	  drawCard(i, state);
        -:  368:	  	//	}
        -:  369:	}
        -:  370:
        -:  371:	//set embargo tokens to 0 for all supply piles
    55188:  372:	for (i = 0; i <= treasure_map; i++)
branch  0 taken 53217
branch  1 taken 1971 (fallthrough)
        -:  373:	{
    53217:  374:	  	state->embargoTokens[i] = 0;
        -:  375:	}	
        -:  376:
        -:  377:	//initialize first player's turn
     1971:  378:	state->outpostPlayed = 0;
     1971:  379:	state->phase = 0;
     1971:  380:	state->numActions = 1;
     1971:  381:	state->numBuys = 1;
     1971:  382:	state->playedCardCount = 0;
     1971:  383:	state->whoseTurn = 0;
     1971:  384:	state->handCount[state->whoseTurn] = 0;
        -:  385:	//int it; move to top
        -:  386:
        -:  387:	//Moved draw cards to here, only drawing at the start of a turn
    11826:  388:	for (it = 0; it < 5; it++)
branch  0 taken 9855
branch  1 taken 1971 (fallthrough)
        -:  389:	{
     9855:  390:		drawCard(state->whoseTurn, state);
call    0 returned 9855
        -:  391:	}
        -:  392:
     1971:  393:	updateCoins(state->whoseTurn, state, 0);
call    0 returned 1971
        -:  394:
     1971:  395:	return 0;
        -:  396:}
        -:  397:
function shuffle called 6351 returned 100% blocks executed 94%
     6351:  398:int shuffle(int player, struct gameState *state) 
        -:  399:{
        -:  400: 
        -:  401:
        -:  402:  int newDeck[MAX_DECK];
     6351:  403:  int newDeckPos = 0;
        -:  404:  int card;
        -:  405:  int i;
        -:  406:
     6351:  407:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 6351
    #####:  408:    return -1;
     6351:  409:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 6351
        -:  410:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  411:
    76212:  412:  while (state->deckCount[player] > 0) {
branch  0 taken 63510
branch  1 taken 6351 (fallthrough)
    63510:  413:    card = floor(Random() * state->deckCount[player]);
call    0 returned 63510
    63510:  414:    newDeck[newDeckPos] = state->deck[player][card];
    63510:  415:    newDeckPos++;
   221409:  416:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 157899
branch  1 taken 63510 (fallthrough)
   157899:  417:      state->deck[player][i] = state->deck[player][i+1];
        -:  418:    }
    63510:  419:    state->deckCount[player]--;
        -:  420:  }
    69861:  421:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 63510
branch  1 taken 6351 (fallthrough)
    63510:  422:    state->deck[player][i] = newDeck[i];
    63510:  423:    state->deckCount[player]++;
        -:  424:  }
        -:  425:
     6351:  426:  return 0;
        -:  427:}
        -:  428:
function playCard called 0 returned 0% blocks executed 0%
    #####:  429:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  430:{	
        -:  431:  int card;
    #####:  432:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  433:
        -:  434:  //check if it is the right phase
    #####:  435:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  436:    {
    #####:  437:      return -1;
        -:  438:    }
        -:  439:	
        -:  440:  //check if player has enough actions
    #####:  441:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  442:    {
    #####:  443:      return -1;
        -:  444:    }
        -:  445:	
        -:  446:  //get card played
    #####:  447:  card = handCard(handPos, state);
call    0 never executed
        -:  448:	
        -:  449:  //check if selected card is an action
    #####:  450:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  451:    {
    #####:  452:      return -1;
        -:  453:    }
        -:  454:	
        -:  455:  //play card
    #####:  456:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  457:    {
    #####:  458:      return -1;
        -:  459:    }
        -:  460:	
        -:  461:  //reduce number of actions
    #####:  462:  state->numActions--;
        -:  463:
        -:  464:  //update coins (Treasure cards may be added with card draws)
    #####:  465:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  466:	
    #####:  467:  return 0;
        -:  468:}
        -:  469:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  470:int buyCard(int supplyPos, struct gameState *state) {
        -:  471:  int who;
        -:  472:  if (DEBUG){
        -:  473:    printf("Entering buyCard...\n");
        -:  474:  }
        -:  475:
        -:  476:  // I don't know what to do about the phase thing.
        -:  477:
    #####:  478:  who = state->whoseTurn;
        -:  479:
    #####:  480:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  481:    if (DEBUG)
        -:  482:      printf("You do not have any buys left\n");
    #####:  483:    return -1;
    #####:  484:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  485:    if (DEBUG)
        -:  486:      printf("There are not any of that type of card left\n");
    #####:  487:    return -1;
    #####:  488:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  489:    if (DEBUG) 
        -:  490:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  491:    return -1;
        -:  492:  } else {
    #####:  493:    state->phase=1;
        -:  494:    //state->supplyCount[supplyPos]--;
    #####:  495:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  496:  
    #####:  497:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  498:    state->numBuys--;
        -:  499:    if (DEBUG)
        -:  500:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  501:  }
        -:  502:
        -:  503:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  504:  //state->discardCount[who]++;
        -:  505:    
    #####:  506:  return 0;
        -:  507:}
        -:  508:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  509:int numHandCards(struct gameState *state) {
    #####:  510:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  511:}
        -:  512:
function handCard called 1215 returned 100% blocks executed 100%
     1215:  513:int handCard(int handPos, struct gameState *state) {
     1215:  514:  int currentPlayer = whoseTurn(state);
call    0 returned 1215
     1215:  515:  return state->hand[currentPlayer][handPos];
        -:  516:}
        -:  517:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  518:int supplyCount(int card, struct gameState *state) {
    #####:  519:  return state->supplyCount[card];
        -:  520:}
        -:  521:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  522:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  523:  int i;
    #####:  524:  int count = 0;
        -:  525:
    #####:  526:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  527:    {
    #####:  528:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  529:    }
        -:  530:
    #####:  531:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  532:    {
    #####:  533:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  534:    }
        -:  535:
    #####:  536:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  537:    {
    #####:  538:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  539:    }
        -:  540:
    #####:  541:  return count;
        -:  542:}
        -:  543:
function whoseTurn called 1215 returned 100% blocks executed 100%
     1215:  544:int whoseTurn(struct gameState *state) {
     1215:  545:  return state->whoseTurn;
        -:  546:}
        -:  547:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  548:int endTurn(struct gameState *state) {
        -:  549:  int k;
        -:  550:  int i;
    #####:  551:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  552:  
        -:  553:  //Discard hand
    #####:  554:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  555:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  556:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  557:  }
    #####:  558:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  559:    
        -:  560:  //Code for determining the player
    #####:  561:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  562:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  563:  }
        -:  564:  else{
    #####:  565:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  566:  }
        -:  567:
    #####:  568:  state->outpostPlayed = 0;
    #####:  569:  state->phase = 0;
    #####:  570:  state->numActions = 1;
    #####:  571:  state->coins = 0;
    #####:  572:  state->numBuys = 1;
    #####:  573:  state->playedCardCount = 0;
    #####:  574:  state->handCount[state->whoseTurn] = 0;
        -:  575:
        -:  576:  //int k; move to top
        -:  577:  //Next player draws hand
    #####:  578:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  579:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  580:  }
        -:  581:
        -:  582:  //Update money
    #####:  583:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  584:
    #####:  585:  return 0;
        -:  586:}
        -:  587:
function isGameOver called 1280 returned 100% blocks executed 91%
     1280:  588:int isGameOver(struct gameState *state) 
        -:  589:{
        -:  590:	int i;
        -:  591:	int j;
        -:  592:	
        -:  593:	//if stack of Province cards is empty, the game ends
     1280:  594:	if (state->supplyCount[province] == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1280
        -:  595:    {
    #####:  596:    	return 1;
        -:  597:    }
        -:  598:
        -:  599:	//if three supply pile are at 0, the game ends
     1280:  600:	j = 0;
    33280:  601:	for (i = 0; i < 25; i++) //shouldn't this be 27?
branch  0 taken 32000
branch  1 taken 1280 (fallthrough)
        -:  602:    {
    32000:  603:    	if (state->supplyCount[i] == 0)
branch  0 taken 3776 (fallthrough)
branch  1 taken 28224
        -:  604:		{
     3776:  605:	  		j++;
        -:  606:		}
        -:  607:    }
     1280:  608:  	if ( j >= 3)
branch  0 taken 820 (fallthrough)
branch  1 taken 460
        -:  609:    {
      820:  610:      	return 1;
        -:  611:    }
        -:  612:
      460:  613:  	return 0;
        -:  614:}
        -:  615:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  616:int scoreFor (int player, struct gameState *state) {
        -:  617:
        -:  618:  int i;
    #####:  619:  int score = 0;
        -:  620:  //score from hand
    #####:  621:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  622:    {
    #####:  623:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  624:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  625:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  626:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  627:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  628:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  629:    }
        -:  630:
        -:  631:  //score from discard
    #####:  632:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  633:    {
    #####:  634:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  635:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  636:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  637:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  638:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  639:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  640:    }
        -:  641:
        -:  642:  //score from deck
    #####:  643:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  644:    {
    #####:  645:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  646:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  647:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  648:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  649:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  650:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  651:    }
        -:  652:
    #####:  653:  return score;
        -:  654:}
        -:  655:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  656:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  657:  int i;	
        -:  658:  int j;
        -:  659:  int highScore;
        -:  660:  int currentPlayer;
        -:  661:
        -:  662:  //get score for each player
    #####:  663:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  664:    {
        -:  665:      //set unused player scores to -9999
    #####:  666:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  667:	{
    #####:  668:	  players[i] = -9999;
        -:  669:	}
        -:  670:      else
        -:  671:	{
    #####:  672:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  673:	}
        -:  674:    }
        -:  675:
        -:  676:  //find highest score
    #####:  677:  j = 0;
    #####:  678:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  679:    {
    #####:  680:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  681:	{
    #####:  682:	  j = i;
        -:  683:	}
        -:  684:    }
    #####:  685:  highScore = players[j];
        -:  686:
        -:  687:  //add 1 to players who had less turns
    #####:  688:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  689:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  690:    {
    #####:  691:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  692:	{
    #####:  693:	  players[i]++;
        -:  694:	}
        -:  695:    }
        -:  696:
        -:  697:  //find new highest score
    #####:  698:  j = 0;
    #####:  699:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  700:    {
    #####:  701:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  702:	{
    #####:  703:	  j = i;
        -:  704:	}
        -:  705:    }
    #####:  706:  highScore = players[j];
        -:  707:
        -:  708:  //set winners in array to 1 and rest to 0
    #####:  709:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  710:    {
    #####:  711:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  712:	{
    #####:  713:	  players[i] = 1;
        -:  714:	}
        -:  715:      else
        -:  716:	{
    #####:  717:	  players[i] = 0;
        -:  718:	}
        -:  719:    }
        -:  720:
    #####:  721:  return 0;
        -:  722:}
        -:  723:
function drawCard called 9927 returned 100% blocks executed 38%
     9927:  724:int drawCard(int player, struct gameState *state)
        -:  725:{	
        -:  726:	int count;
        -:  727:	int deckCounter;
     9927:  728:	if (state->deckCount[player] <= 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 9927
        -:  729:	{//Deck is empty
        -:  730:
        -:  731:		//Step 1 Shuffle the discard pile back into a deck
        -:  732:		int i;
        -:  733:		//Move discard to deck
    #####:  734:		for (i = 0; i < state->discardCount[player];i++)
branch  0 never executed
branch  1 never executed
        -:  735:		{
    #####:  736:			state->deck[player][i] = state->discard[player][i];
    #####:  737:			state->discard[player][i] = -1;
        -:  738:		}
        -:  739:
    #####:  740:		state->deckCount[player] = state->discardCount[player];
    #####:  741:		state->discardCount[player] = 0;//Reset discard
        -:  742:
        -:  743:		//Shufffle the deck
    #####:  744:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  745:
        -:  746:		if (DEBUG)
        -:  747:		{//Debug statements
        -:  748:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  749:		}
        -:  750:
    #####:  751:		state->discardCount[player] = 0;
        -:  752:
        -:  753:		//Step 2 Draw Card
    #####:  754:		count = state->handCount[player];//Get current player's hand count
        -:  755:
        -:  756:		if (DEBUG)
        -:  757:		{//Debug statements
        -:  758:			printf("Current hand count: %d\n", count);
        -:  759:		}
        -:  760:
    #####:  761:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  762:
    #####:  763:		if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  764:			return -1;
        -:  765:
    #####:  766:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  767:		state->deckCount[player]--;
    #####:  768:		state->handCount[player]++;//Increment hand count
        -:  769:	}
        -:  770:
        -:  771:	else
        -:  772:	{
     9927:  773:		int count = state->handCount[player];//Get current hand count for player
        -:  774:		int deckCounter;
        -:  775:		if (DEBUG){//Debug statements
        -:  776:		printf("Current hand count: %d\n", count);
        -:  777:	}
        -:  778:
     9927:  779:	deckCounter = state->deckCount[player];//Create holder for the deck count
     9927:  780:	state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     9927:  781:	state->deckCount[player]--;
     9927:  782:	state->handCount[player]++;//Increment hand count
        -:  783:}
        -:  784:
     9927:  785:return 0;
        -:  786:}
        -:  787:
function getCost called 28 returned 100% blocks executed 100%
       28:  788:int getCost(int cardNumber)
        -:  789:{
       28:  790:	switch( cardNumber ) 
branch  0 taken 1
branch  1 taken 1
branch  2 taken 1
branch  3 taken 1
branch  4 taken 1
branch  5 taken 1
branch  6 taken 1
branch  7 taken 1
branch  8 taken 1
branch  9 taken 1
branch 10 taken 1
branch 11 taken 1
branch 12 taken 1
branch 13 taken 1
branch 14 taken 1
branch 15 taken 1
branch 16 taken 1
branch 17 taken 1
branch 18 taken 1
branch 19 taken 1
branch 20 taken 1
branch 21 taken 1
branch 22 taken 1
branch 23 taken 1
branch 24 taken 1
branch 25 taken 1
branch 26 taken 1
branch 27 taken 1
        -:  791:    {
        -:  792:    case curse:		//card 1
        1:  793:      return 0;
        -:  794:    case estate:	//card 2
        1:  795:      return 2;
        -:  796:    case duchy:		//card 3
        1:  797:      return 5;
        -:  798:    case province:	//card 4
        1:  799:      return 8;
        -:  800:    case copper:	//card 5
        1:  801:      return 0;
        -:  802:    case silver:	//card 6
        1:  803:      return 3;
        -:  804:    case gold:		//card 7
        1:  805:      return 6;
        -:  806:    case adventurer://card 8
        1:  807:      return 6;
        -:  808:    case council_room://card 9
        1:  809:      return 5;
        -:  810:    case feast:		//card 10
        1:  811:      return 4;
        -:  812:    case gardens:	//card 11
        1:  813:      return 4;
        -:  814:    case mine:		//card 12
        1:  815:      return 5;
        -:  816:    case remodel:	//card 13
        1:  817:      return 4;
        -:  818:    case smithy:	//card 14
        1:  819:      return 4;
        -:  820:    case village:	//card 15
        1:  821:      return 3;
        -:  822:    case baron:		//card 16
        1:  823:      return 4;
        -:  824:    case great_hall://card 17
        1:  825:      return 3;
        -:  826:    case minion:	//card 18
        1:  827:      return 5;
        -:  828:    case steward:	//card 19
        1:  829:      return 3;
        -:  830:    case tribute:	//card 20
        1:  831:      return 5;
        -:  832:    case ambassador://card 21
        1:  833:      return 3;
        -:  834:    case cutpurse:	//card 22
        1:  835:      return 4;
        -:  836:    case embargo: 	//card 23
        1:  837:      return 2;
        -:  838:    case outpost:	//card 24
        1:  839:      return 5;
        -:  840:    case salvager:	//card 25
        1:  841:      return 4;
        -:  842:    case sea_hag:	//card 26
        1:  843:      return 4;
        -:  844:    case treasure_map://card 27
        1:  845:      return 4;
        -:  846:    }
        -:  847:	
        1:  848:  return -1;
        -:  849:}
        -:  850:
        -:  851://below are the actions for the modified cards for assignment 2
function smithy_action called 9 returned 100% blocks executed 100%
        9:  852:int smithy_action(struct gameState *state, int handPos, int currentPlayer)
        -:  853:{
        9:  854:	int i = 0;
        -:  855:	//+3 Cards changed to 4 cards drawn on 7/6/2017 for assignment2
       45:  856:    for (i = 0; i < 4; i++)
branch  0 taken 36
branch  1 taken 9 (fallthrough)
        -:  857:	{
       36:  858:	  	drawCard(currentPlayer, state);
call    0 returned 36
        -:  859:	}
        -:  860:			
        -:  861:    //discard card from hand
        9:  862:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 9
        9:  863:    return 0;
        -:  864:	
        -:  865:}
        -:  866:
function adventurer_action called 9 returned 100% blocks executed 38%
        9:  867:int adventurer_action(struct gameState *state, int handPos, int currentPlayer)
        -:  868:{
        -:  869:	int cardDrawn, drawntreasure, z;
        9:  870:	z = 0;
        -:  871:	int temphand[MAX_HAND];
        -:  872:	//adventurer actions here
       18:  873:	while(drawntreasure<2)
branch  0 taken 0
branch  1 taken 9 (fallthrough)
        -:  874:	{
    #####:  875:		if (state->deckCount[currentPlayer] <1)
branch  0 never executed
branch  1 never executed
        -:  876:		{//if the deck is empty we need to shuffle discard and add to deck
    #####:  877:			shuffle(currentPlayer, state);
call    0 never executed
        -:  878:		}
    #####:  879:		drawCard(currentPlayer, state);
call    0 never executed
    #####:  880:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  881:		//printf("The current card played is a: %d\n", cardDrawn);
    #####:  882:		if (cardDrawn == gold || cardDrawn == silver)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  883:		{
        -:  884:			//printf("The treasure drawn is a: %d\n", cardDrawn);
    #####:  885:	  		drawntreasure++;
        -:  886:		}
    #####:  887:		else if(cardDrawn == copper)
branch  0 never executed
branch  1 never executed
        -:  888:		{
    #####:  889:			drawntreasure += 1;
        -:  890:		}
        -:  891:		else
        -:  892:		{
        -:  893:			//printf("The non treasure discard is a: %d\n", cardDrawn);
    #####:  894:	  		temphand[(z)]=cardDrawn;
    #####:  895:	  		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  896:	  		(z)++;
        -:  897:		}
        -:  898:    }
       18:  899:    while((z)-1>=0)
branch  0 taken 0
branch  1 taken 9 (fallthrough)
        -:  900:	{
    #####:  901:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[(z)-1]; // discard all cards in play that have been drawn
    #####:  902:		(z)=(z)-1;
        -:  903:    }
        -:  904:	//printf("in here");
        9:  905:    return 0;
        -:  906:}
        -:  907:
function great_hall_action called 18 returned 100% blocks executed 100%
       18:  908:int great_hall_action(struct gameState *state, int currentPlayer, int handPos)
        -:  909:{
        -:  910:	//+1 Card
       18:  911:	drawCard(currentPlayer, state);
call    0 returned 18
        -:  912:		
        -:  913:	//+1 Actions
       18:  914:	state->numActions++;
        -:  915:		
        -:  916:	//discard card from hand
       18:  917:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 18
        -:  918:
        -:  919:	//add a copper coin
        -:  920:
        -:  921:	//updateCoins(currentPlayer, &state, 15);//fixme
        -:  922:	//state->coins = state->coins +10;
        -:  923:	//gainCard(estate, state, 0, currentPlayer);
       18:  924:	drawCard(currentPlayer, state);
call    0 returned 18
       18:  925:	return 0;
        -:  926:	
        -:  927:}
        -:  928:
function embargo_action called 0 returned 0% blocks executed 0%
    #####:  929:int embargo_action(struct gameState *state, int handPos, int currentPlayer, int choice1)
        -:  930:{
        -:  931:	//printf("Init Coins: %d\n", state->coins);
        -:  932:	//+2 Coins
    #####:  933:	state->coins = state->coins + 2;
        -:  934:
        -:  935:	//printf("final Coins: %d\n", state->coins);
        -:  936:		
        -:  937:	//see if selected pile is in play
    #####:  938:	if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  939:	{
    #####:  940:		return -1;
        -:  941:	}
        -:  942:		
        -:  943:	//add embargo token to selected supply pile
    #####:  944:	state->embargoTokens[choice1]++;
        -:  945:		
        -:  946:	//trash card
    #####:  947:	discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  948:	if(state->coins > 3)
branch  0 never executed
branch  1 never executed
        -:  949:	{
        -:  950:		//end game
        -:  951:
    #####:  952:		printf("you lose \n");
call    0 never executed
    #####:  953:		exit(-1);
call    0 never executed
        -:  954:	}
        -:  955:
    #####:  956:	return 0;
        -:  957:
        -:  958:}
        -:  959:
function outpost_action called 0 returned 0% blocks executed 0%
    #####:  960:int outpost_action(struct gameState *state, int handPos, int currentPlayer, int p, int q)
        -:  961:{
        -:  962:	//if the player has an embargo in their hand the current player loses al of their cards
    #####:  963:	for(p = 0;p < state->handCount[currentPlayer]; p++)
branch  0 never executed
branch  1 never executed
        -:  964:	{
    #####:  965:		if(state->hand[currentPlayer][p] == embargo)
branch  0 never executed
branch  1 never executed
        -:  966:		{
    #####:  967:			for(q = 0; q < state->handCount[currentPlayer]; q++)
branch  0 never executed
branch  1 never executed
        -:  968:			{
    #####:  969:				discardCard(q, currentPlayer, state, 0);
call    0 never executed
        -:  970:			}
    #####:  971:			break;
        -:  972:		}
        -:  973:	}
        -:  974:	//set outpost flag
    #####:  975:	state->outpostPlayed++;
        -:  976:		
        -:  977:	//discard card
    #####:  978:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  979:	return 0;
        -:  980:}
        -:  981:
function village_action called 0 returned 0% blocks executed 0%
    #####:  982:int village_action(struct gameState *state, int handPos, int currentPlayer) 
        -:  983:{
        -:  984:	//+1 Card
    #####:  985:	drawCard(currentPlayer, state);
call    0 never executed
        -:  986:		
        -:  987:	//+2 Actions
    #####:  988:	state->numActions = state->numActions + 2;
        -:  989:		
        -:  990:	//discard played card from hand
    #####:  991:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  992:	return 0;
        -:  993:
        -:  994:}
        -:  995:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  996:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  997:{
        -:  998:  int i;
        -:  999:  int j;
        -: 1000:  int k;
        -: 1001:  int x;
        -: 1002:  int p;
        -: 1003:  int q;
        -: 1004:  int index;
    #####: 1005:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####: 1006:  int nextPlayer = currentPlayer + 1;
        -: 1007:
    #####: 1008:  int tributeRevealedCards[2] = {-1, -1};
        -: 1009:  int temphand[MAX_HAND];// moved above the if statement
    #####: 1010:  int drawntreasure=0;
        -: 1011:  int cardDrawn;
        -: 1012:
        -: 1013:	int zzz;
        -: 1014:	int adventure;
    #####: 1015:  int z = 0;// this is the counter for the temp hand
    #####: 1016:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####: 1017:    nextPlayer = 0;
        -: 1018:  }
        -: 1019:  
        -: 1020:	
        -: 1021:  //uses switch to select card and perform actions
    #####: 1022:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -: 1023:	{
        -: 1024:    case adventurer:
    #####: 1025:		adventure = adventurer_action(state, handPos, currentPlayer);
call    0 never executed
    #####: 1026:		return adventure;
        -: 1027:			
        -: 1028:    case council_room:
        -: 1029:      	//+4 Cards
    #####: 1030:      	for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1031:		{
    #####: 1032:	  		drawCard(currentPlayer, state);
call    0 never executed
        -: 1033:		}
        -: 1034:			
        -: 1035:      	//+1 Buy
    #####: 1036:      	state->numBuys++;
        -: 1037:			
        -: 1038:      	//Each other player draws a card
    #####: 1039:      	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1040:		{
    #####: 1041:	  		if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1042:	    	{
    #####: 1043:	      		drawCard(i, state);
call    0 never executed
        -: 1044:	    	}
        -: 1045:		}
        -: 1046:			
        -: 1047:      	//put played card in played card pile
    #####: 1048:      	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1049:			
    #####: 1050:      	return 0;
        -: 1051:			
        -: 1052:    case feast:
        -: 1053:      	//gain card with cost up to 5
        -: 1054:      	//Backup hand
    #####: 1055:      	for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1056:		{
    #####: 1057:			temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1058:			state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1059:      	}
        -: 1060:      	//Backup hand
        -: 1061:
        -: 1062:      	//Update Coins for Buy
    #####: 1063:      	updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1064:      	x = 1;//Condition to loop on
    #####: 1065:      	while( x == 1) 
branch  0 never executed
branch  1 never executed
        -: 1066:		{//Buy one card
    #####: 1067:			if (supplyCount(choice1, state) <= 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1068:			{
        -: 1069:	  			if (DEBUG)
        -: 1070:	    			printf("None of that card left, sorry!\n");
        -: 1071:
        -: 1072:	  			if (DEBUG)
        -: 1073:				{
        -: 1074:	    			printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1075:	  			}
        -: 1076:			}
    #####: 1077:			else if (state->coins < getCost(choice1))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1078:			{
    #####: 1079:	  			printf("That card is too expensive!\n");
call    0 never executed
        -: 1080:
        -: 1081:	  			if (DEBUG)
        -: 1082:				{
        -: 1083:	    			printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1084:	  			}
        -: 1085:			}
        -: 1086:			else
        -: 1087:			{
        -: 1088:
        -: 1089:	  			if (DEBUG)
        -: 1090:				{
        -: 1091:	    			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1092:	  			}
        -: 1093:
    #####: 1094:	  			gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1095:	  			x = 0;//No more buying cards
        -: 1096:
        -: 1097:	  			if (DEBUG)
        -: 1098:				{
        -: 1099:	    			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1100:	  			}
        -: 1101:
        -: 1102:			}
        -: 1103:      	}     
        -: 1104:
        -: 1105:      	//Reset Hand
    #####: 1106:      	for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1107:		{
    #####: 1108:			state->hand[currentPlayer][i] = temphand[i];
    #####: 1109:			temphand[i] = -1;
        -: 1110:      	}
        -: 1111:      	//Reset Hand
        -: 1112:      			
    #####: 1113:      	return 0;
        -: 1114:			
        -: 1115:    case gardens:
    #####: 1116:      	return -1;
        -: 1117:			
        -: 1118:    case mine:
    #####: 1119:      	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1120:
    #####: 1121:      	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1122:		{
    #####: 1123:	  	return -1;
        -: 1124:		}
        -: 1125:		
    #####: 1126:      	if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1127:		{
    #####: 1128:	  		return -1;
        -: 1129:		}
        -: 1130:
    #####: 1131:      	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1132:		{
    #####: 1133:	  		return -1;
        -: 1134:		}
        -: 1135:
    #####: 1136:      	gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1137:
        -: 1138:      	//discard card from hand
    #####: 1139:      	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1140:
        -: 1141:      	//discard trashed card
    #####: 1142:      	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1143:		{
    #####: 1144:	  		if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1145:	    	{
    #####: 1146:	      		discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1147:	      		break;
        -: 1148:	    	}
        -: 1149:		}
        -: 1150:			
    #####: 1151:      	return 0;
        -: 1152:			
        -: 1153:    case remodel:
    #####: 1154:      	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1155:
    #####: 1156:      	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1157:		{
    #####: 1158:	  		return -1;
        -: 1159:		}
        -: 1160:
    #####: 1161:      	gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1162:
        -: 1163:      	//discard card from hand
    #####: 1164:      	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1165:
        -: 1166:      	//discard trashed card
    #####: 1167:      	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1168:		{	
    #####: 1169:	  		if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1170:	    	{
    #####: 1171:	      		discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1172:	      		break;
        -: 1173:	    	}
        -: 1174:		}
        -: 1175:
        -: 1176:
    #####: 1177:      	return 0;
        -: 1178:		
        -: 1179:    case smithy:
    #####: 1180:      	return smithy_action(state, handPos, currentPlayer);		
call    0 never executed
        -: 1181:    case village:
    #####: 1182:		return village_action(state, handPos, currentPlayer);		
call    0 never executed
        -: 1183:    case baron:
    #####: 1184:      	state->numBuys++;//Increase buys by 1!
    #####: 1185:      	if (choice1 > 0)
branch  0 never executed
branch  1 never executed
        -: 1186:		{//Boolean true or going to discard an estate
    #####: 1187:			int p = 0;//Iterator for hand!
    #####: 1188:			int card_not_discarded = 1;//Flag for discard set!
    #####: 1189:			while(card_not_discarded)
branch  0 never executed
branch  1 never executed
        -: 1190:			{
    #####: 1191:	  			if (state->hand[currentPlayer][p] == estate)
branch  0 never executed
branch  1 never executed
        -: 1192:				{//Found an estate card!
    #####: 1193:	    			state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1194:	    			state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1195:	    			state->discardCount[currentPlayer]++;
    #####: 1196:	    			for (;p < state->handCount[currentPlayer]; p++)
branch  0 never executed
branch  1 never executed
        -: 1197:					{
    #####: 1198:	      				state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1199:	    			}
    #####: 1200:	    			state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1201:	    			state->handCount[currentPlayer]--;
    #####: 1202:	    			card_not_discarded = 0;//Exit the loop
        -: 1203:	  			}
    #####: 1204:	  			else if (p > state->handCount[currentPlayer])
branch  0 never executed
branch  1 never executed
        -: 1205:				{
        -: 1206:	    			if(DEBUG) 
        -: 1207:					{
        -: 1208:	      				printf("No estate cards in your hand, invalid choice\n");
        -: 1209:	      				printf("Must gain an estate if there are any\n");
        -: 1210:	    			}
    #####: 1211:	    			if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1212:					{
    #####: 1213:	      				gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1214:	      				state->supplyCount[estate]--;//Decrement estates
    #####: 1215:	      				if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1216:						{
    #####: 1217:							isGameOver(state);
call    0 never executed
        -: 1218:	      				}
        -: 1219:	    			}
    #####: 1220:	    			card_not_discarded = 0;//Exit the loop
        -: 1221:	  			}
        -: 1222:			    
        -: 1223:	  			else
        -: 1224:				{
    #####: 1225:	    			p++;//Next card
        -: 1226:	  			}
        -: 1227:			}
        -: 1228:      	}
        -: 1229:			    
        -: 1230:      	else
        -: 1231:		{
    #####: 1232:			if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1233:			{
    #####: 1234:	  			gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1235:	  			state->supplyCount[estate]--;//Decrement Estates
    #####: 1236:	  			if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1237:				{
    #####: 1238:	    			isGameOver(state);
call    0 never executed
        -: 1239:	  			}
        -: 1240:			}
        -: 1241:      	}
        -: 1242:	    
        -: 1243:      
    #####: 1244:      	return 0;
        -: 1245:		
        -: 1246:    case great_hall:
        -: 1247:
    #####: 1248:		return great_hall_action(state, currentPlayer, handPos);
call    0 never executed
        -: 1249:		
        -: 1250:    case minion:
        -: 1251:      	//+1 action
    #####: 1252:      	state->numActions++;
        -: 1253:			
        -: 1254:      	//discard card from hand
    #####: 1255:      	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1256:			
    #####: 1257:      	if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1258:		{
    #####: 1259:	  		state->coins = state->coins + 2;
        -: 1260:		}
        -: 1261:			
    #####: 1262:      	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1263:		{
        -: 1264:	  		//discard hand
    #####: 1265:	  		while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1266:	    	{
    #####: 1267:	      		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1268:	    	}
        -: 1269:				
        -: 1270:	  		//draw 4
    #####: 1271:	  		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1272:	    	{
    #####: 1273:	      		drawCard(currentPlayer, state);
call    0 never executed
        -: 1274:	    	}
        -: 1275:				
        -: 1276:	  		//other players discard hand and redraw if hand size > 4
    #####: 1277:	  		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1278:	    	{
    #####: 1279:	      		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1280:				{
    #####: 1281:		  			if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1282:		    		{
        -: 1283:		      			//discard hand
    #####: 1284:		      			while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1285:						{
    #####: 1286:			  				discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1287:						}
        -: 1288:							
        -: 1289:		      			//draw 4
    #####: 1290:		      			for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1291:						{
    #####: 1292:			  				drawCard(i, state);
call    0 never executed
        -: 1293:						}
        -: 1294:		    		}
        -: 1295:				}
        -: 1296:	    	}
        -: 1297:				
        -: 1298:		}
    #####: 1299:      	return 0;
        -: 1300:		
        -: 1301:    case steward:
    #####: 1302:      	if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1303:		{
        -: 1304:	  		//+2 cards
    #####: 1305:	  		drawCard(currentPlayer, state);
call    0 never executed
    #####: 1306:	  		drawCard(currentPlayer, state);
call    0 never executed
        -: 1307:		}
    #####: 1308:      	else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1309:		{
        -: 1310:	  		//+2 coins
    #####: 1311:	  		state->coins = state->coins + 2;
        -: 1312:		}
        -: 1313:      	else
        -: 1314:		{
        -: 1315:	  		//trash 2 cards in hand
    #####: 1316:	  		discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1317:	  		discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1318:		}
        -: 1319:			
        -: 1320:      	//discard card from hand
    #####: 1321:      	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1322:      	return 0;
        -: 1323:		
        -: 1324:    case tribute:
    #####: 1325:      	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
branch  0 never executed
branch  1 never executed
        -: 1326:		{
    #####: 1327:			if (state->deckCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1328:			{
    #####: 1329:	  			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1330:	  			state->deckCount[nextPlayer]--;
        -: 1331:			}
    #####: 1332:			else if (state->discardCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1333:			{
    #####: 1334:	  			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1335:	  			state->discardCount[nextPlayer]--;
        -: 1336:			}
        -: 1337:			else
        -: 1338:			{
        -: 1339:	  			//No Card to Reveal
        -: 1340:	  			if (DEBUG)
        -: 1341:				{
        -: 1342:	    			printf("No cards to reveal\n");
        -: 1343:	  			}
        -: 1344:			}
        -: 1345:      	}
        -: 1346:	    
        -: 1347:      	else
        -: 1348:		{
    #####: 1349:			if (state->deckCount[nextPlayer] == 0)
branch  0 never executed
branch  1 never executed
        -: 1350:			{
    #####: 1351:	  			for (i = 0; i < state->discardCount[nextPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1352:				{
    #####: 1353:	    			state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1354:	    			state->deckCount[nextPlayer]++;
    #####: 1355:	    			state->discard[nextPlayer][i] = -1;
    #####: 1356:	    			state->discardCount[nextPlayer]--;
        -: 1357:	  			}
        -: 1358:			    
    #####: 1359:	  			shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1360:			} 
    #####: 1361:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1362:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1363:			state->deckCount[nextPlayer]--;
    #####: 1364:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1365:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1366:		state->deckCount[nextPlayer]--;
        -: 1367:      	}    
        -: 1368:		       
    #####: 1369:      	if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 never executed
branch  1 never executed
        -: 1370:		{//If we have a duplicate card, just drop one 
    #####: 1371:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1372:			state->playedCardCount++;
    #####: 1373:			tributeRevealedCards[1] = -1;
        -: 1374:      	}
        -: 1375:
    #####: 1376:      	for (i = 0; i <= 2; i ++)
branch  0 never executed
branch  1 never executed
        -: 1377:		{
    #####: 1378:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1379:			{//Treasure cards
    #####: 1380:	  			state->coins += 2;
        -: 1381:			}
        -: 1382:		    
    #####: 1383:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1384:			{//Victory Card Found
    #####: 1385:	  			drawCard(currentPlayer, state);
call    0 never executed
    #####: 1386:	  			drawCard(currentPlayer, state);
call    0 never executed
        -: 1387:			}
        -: 1388:			else
        -: 1389:			{//Action Card
    #####: 1390:	  			state->numActions = state->numActions + 2;
        -: 1391:			}
        -: 1392:      	}
        -: 1393:	    
    #####: 1394:      	return 0;
        -: 1395:		
        -: 1396:    case ambassador:
    #####: 1397:      	j = 0;		//used to check if player has enough cards to discard
        -: 1398:
    #####: 1399:      	if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1400:		{
    #####: 1401:	  		return -1;				
        -: 1402:		}
        -: 1403:
    #####: 1404:      	if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1405:		{
    #####: 1406:	  		return -1;
        -: 1407:		}
        -: 1408:
    #####: 1409:      	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1410:		{
    #####: 1411:	  		if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1412:	    	{
    #####: 1413:	      		j++;
        -: 1414:	    	}
        -: 1415:		}
    #####: 1416:      	if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1417:		{
    #####: 1418:	  		return -1;				
        -: 1419:		}
        -: 1420:
        -: 1421:      	if (DEBUG) 
        -: 1422:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1423:
        -: 1424:      		//increase supply count for choosen card by amount being discarded
    #####: 1425:      		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1426:			
        -: 1427:      		//each other player gains a copy of revealed card
    #####: 1428:      	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1429:		{
    #####: 1430:	  		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1431:	    	{
    #####: 1432:	      		gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1433:	    	}
        -: 1434:		}
        -: 1435:
        -: 1436:      	//discard played card from hand
    #####: 1437:      	discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1438:
        -: 1439:      	//trash copies of cards returned to supply
    #####: 1440:      	for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1441:		{
    #####: 1442:	  		for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1443:	    	{
    #####: 1444:	      		if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1445:				{
    #####: 1446:		  			discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1447:		  			break;
        -: 1448:				}
        -: 1449:	    	}
        -: 1450:		}			
        -: 1451:
    #####: 1452:      return 0;
        -: 1453:		
        -: 1454:    case cutpurse:
        -: 1455:
    #####: 1456:      	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1457:      	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1458:		{
    #####: 1459:	  		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1460:	    	{
    #####: 1461:	      		for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1462:				{
    #####: 1463:		  			if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1464:		    		{
    #####: 1465:		      			discardCard(j, i, state, 0);
call    0 never executed
    #####: 1466:		      			break;
        -: 1467:		    		}
    #####: 1468:		  			if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1469:		    		{
    #####: 1470:		      			for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1471:						{
        -: 1472:			  				if (DEBUG)
        -: 1473:			    				printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1474:						}	
    #####: 1475:		      			break;
        -: 1476:		    		}		
        -: 1477:				}
        -: 1478:					
        -: 1479:	    	}
        -: 1480:				
        -: 1481:		}				
        -: 1482:
        -: 1483:      	//discard played card from hand
    #####: 1484:      	discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1485:
    #####: 1486:      	return 0;
        -: 1487:
        -: 1488:		
        -: 1489:    case embargo: 
        -: 1490:		//embargo_action(struct gameState *state, handPos, currentPlayer)
    #####: 1491:		return embargo_action(state, handPos, currentPlayer, choice1);
call    0 never executed
        -: 1492:		
        -: 1493:    case outpost:
        -: 1494:		//int outpost_action(struct gameState *state, int handPos, int currentPlayer, int p, int q)
        -: 1495:
    #####: 1496:		return outpost_action(state, handPos, currentPlayer, p, q);
call    0 never executed
        -: 1497:		
        -: 1498:    case salvager:
        -: 1499:      	//+1 buy
    #####: 1500:      	state->numBuys++;
        -: 1501:			
    #####: 1502:      	if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1503:		{
        -: 1504:	  		//gain coins equal to trashed card
    #####: 1505:	  		state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1506:	  		//trash card
    #####: 1507:	  		discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1508:		}
        -: 1509:			
        -: 1510:      	//discard card
    #####: 1511:      	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1512:      	return 0;
        -: 1513:		
        -: 1514:    case sea_hag:
    #####: 1515:      	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1516:		{
    #####: 1517:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1518:			{
    #####: 1519:	  			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
    #####: 1520:				state->deckCount[i]--;
    #####: 1521:	  			state->discardCount[i]++;
    #####: 1522:	  			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1523:			}
        -: 1524:      	}
    #####: 1525:      	return 0;
        -: 1526:		
        -: 1527:    case treasure_map:
        -: 1528:      	//search hand for another treasure_map
    #####: 1529:      	index = -1;
    #####: 1530:      	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1531:		{
    #####: 1532:	  		if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1533:	    	{
    #####: 1534:	      		index = i;
    #####: 1535:	      		break;
        -: 1536:	    	}
        -: 1537:		}
    #####: 1538:      	if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1539:		{
        -: 1540:	  		//trash both treasure cards
    #####: 1541:	  		discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1542:	  		discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1543:
        -: 1544:	  		//gain 4 Gold cards
    #####: 1545:	  		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1546:	    	{
    #####: 1547:	      		gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1548:	    	}
        -: 1549:				
        -: 1550:	  		//return success
    #####: 1551:	  		return 1;
        -: 1552:		}
        -: 1553:			
        -: 1554:      	//no second treasure_map found in hand
    #####: 1555:      	return -1;
        -: 1556:    }
        -: 1557:	
    #####: 1558:  	return -1;
        -: 1559:}
        -: 1560:
function discardCard called 27 returned 100% blocks executed 100%
       27: 1561:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1562:{
        -: 1563:		
        -: 1564:	//if card is not trashed, added to Played pile 
       27: 1565:	if (trashFlag < 1)
branch  0 taken 27 (fallthrough)
branch  1 taken 0
        -: 1566:	{
        -: 1567:		//add card to played pile
       27: 1568:	 	state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       27: 1569:		state->playedCardCount++;
        -: 1570:	}
        -: 1571:
        -: 1572:	//set played card to -1
       27: 1573:	state->hand[currentPlayer][handPos] = -1;
        -: 1574:
        -: 1575:	//remove card from player's hand
       27: 1576:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 6 (fallthrough)
branch  1 taken 21
        -: 1577:	{
        -: 1578:		//reduce number of cards in hand
        6: 1579:		state->handCount[currentPlayer]--;
        -: 1580:	}
       21: 1581:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 12 (fallthrough)
branch  1 taken 9
        -: 1582:	{
        -: 1583:		//reduce number of cards in hand
       12: 1584:		state->handCount[currentPlayer]--;
        -: 1585:	}
        -: 1586:	else 	
        -: 1587:	{
        -: 1588:		//replace discarded card with last card in hand
        9: 1589:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1590:		//set last card to -1
        9: 1591:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1592:		//reduce number of cards in hand
        9: 1593:		state->handCount[currentPlayer]--;
        -: 1594:	}
        -: 1595:
       27: 1596:	return 0;
        -: 1597:}
        -: 1598:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1599:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1600:{
        -: 1601:	//Note: supplyPos is enum of choosen card
        -: 1602:
        -: 1603:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1604:	if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1605:	{
    #####: 1606:		return -1;
        -: 1607:	}
        -: 1608:
        -: 1609:	//added card for [whoseTurn] current player:
        -: 1610:	// toFlag = 0 : add to discard
        -: 1611:	// toFlag = 1 : add to deck
        -: 1612:	// toFlag = 2 : add to hand
        -: 1613:
    #####: 1614:	if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1615:	{
    #####: 1616:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1617:		state->deckCount[player]++;
        -: 1618:	}
    #####: 1619:	else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1620:	{
    #####: 1621:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1622:		state->handCount[player]++;
        -: 1623:	}
        -: 1624:	else
        -: 1625:	{
    #####: 1626:		state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1627:		state->discardCount[player]++;
        -: 1628:	}
        -: 1629:
        -: 1630:	//decrease number in supply pile
    #####: 1631:	state->supplyCount[supplyPos]--;
        -: 1632:	 
    #####: 1633:	return 0;
        -: 1634:}
        -: 1635:
function updateCoins called 2691 returned 100% blocks executed 100%
     2691: 1636:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1637:{
        -: 1638:	int i;
        -: 1639:
        -: 1640:	//reset coin count
     2691: 1641:	state->coins = 0;
        -: 1642:
        -: 1643:	//add coins for each Treasure card in player's hand
    14886: 1644:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 12195
branch  1 taken 2691 (fallthrough)
        -: 1645:	{
    12195: 1646:		if (state->hand[player][i] == copper)
branch  0 taken 8424 (fallthrough)
branch  1 taken 3771
        -: 1647:		{
     8424: 1648:			state->coins += 1;
        -: 1649:		}
     3771: 1650:		else if (state->hand[player][i] == silver)
branch  0 taken 540 (fallthrough)
branch  1 taken 3231
        -: 1651:		{
      540: 1652:			state->coins += 2;
        -: 1653:		}
     3231: 1654:		else if (state->hand[player][i] == gold)
branch  0 taken 1260 (fallthrough)
branch  1 taken 1971
        -: 1655:		{
     1260: 1656:			state->coins += 3;
        -: 1657:		}	
        -: 1658:	}	
        -: 1659:
        -: 1660:	//add bonus
     2691: 1661:	state->coins += bonus;
        -: 1662:
     2691: 1663:	return 0;
        -: 1664:}
        -: 1665:
        -: 1666:
        -: 1667://end of dominion.c
        -: 1668:
