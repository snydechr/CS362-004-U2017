        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
function compareGameState called 0 returned 0% blocks executed 0%
    #####:    9:int compareGameState(struct gameState game1, struct gameState game2)
        -:   10:{
        -:   11:
    #####:   12:	int same = 0;
    #####:   13:	if(	game1.numPlayers != game2.numPlayers)
branch  0 never executed
branch  1 never executed
    #####:   14:		same++;
        -:   15:	
    #####:   16:}
function comparePlayerState called 6487 returned 100% blocks executed 57%
     6487:   17:int comparePlayerState(struct gameState *game1, struct gameState *game2, int player)
        -:   18:{
     6487:   19:	int notSame = 0;
        -:   20:	int i, j;
     6487:   21:	if(game1->handCount[player] != game2->handCount[player])
branch  0 taken 0 (fallthrough)
branch  1 taken 6487
        -:   22:	{
    #####:   23:		notSame++;
    #####:   24:		printf("---- handCount difference ----\n");
call    0 never executed
    #####:   25:		printf("updated hand count: %d\n", game1->handCount[player]);
call    0 never executed
    #####:   26:		printf("original hand count: %d\n", game2->handCount[player]);
call    0 never executed
        -:   27:	}
        -:   28:
     6487:   29:	if(game1->deckCount[player] != game2->deckCount[player])
branch  0 taken 0 (fallthrough)
branch  1 taken 6487
        -:   30:	{
    #####:   31:		notSame++;
    #####:   32:		printf("---- deckCount difference ----\n");
call    0 never executed
    #####:   33:		printf("original deck count: %d\n", game2->deckCount[player]);
call    0 never executed
    #####:   34:		printf("updated deck count: %d\n", game1->deckCount[player]);
call    0 never executed
        -:   35:
        -:   36:	}
        -:   37:
     6487:   38:	if(game1->discardCount[player] != game2->discardCount[player])
branch  0 taken 3 (fallthrough)
branch  1 taken 6484
        -:   39:	{
        3:   40:		notSame++;
        -:   41:
        3:   42:		printf("---- discardCount difference ----\n");
call    0 returned 3
        3:   43:		printf("original discard count: %d\n", game2->discardCount[player]);
call    0 returned 3
        3:   44:		printf("updated discard count: %d\n", game1->discardCount[player]);
call    0 returned 3
        -:   45:
        -:   46:	}
    16577:   47:	for(i = 0;i < game1->handCount[player]; i++)
branch  0 taken 10090
branch  1 taken 6487 (fallthrough)
        -:   48:	{
    10090:   49:		if(game1->hand[player][i] != game2->hand[player][i])
branch  0 taken 0 (fallthrough)
branch  1 taken 10090
        -:   50:		{
    #####:   51:			notSame++;
    #####:   52:			printf("---- hand difference ----\n");
call    0 never executed
        -:   53:		}
        -:   54:	}
        -:   55:
    61267:   56:	for(j = 0; j < game1->deckCount[player]; j++)
branch  0 taken 54780
branch  1 taken 6487 (fallthrough)
        -:   57:	{
    54780:   58:		if(game1->deck[player][j] != game2->deck[player][j])
branch  0 taken 0 (fallthrough)
branch  1 taken 54780
        -:   59:		{
    #####:   60:			notSame++;
    #####:   61:			printf("---- deck difference ----\n");
call    0 never executed
    #####:   62:			printf("original: %d at index: %d\n", game2->deck[player][j], j);
call    0 never executed
    #####:   63:			printf("updated: %d at indes: %d\n\n", game1->deck[player][j], j);
call    0 never executed
        -:   64:		}
        -:   65:	}
     6509:   66:	for(j = 0; j < game1->discardCount[player]; j++)
branch  0 taken 22
branch  1 taken 6487 (fallthrough)
        -:   67:	{
       22:   68:		if(game1->discard[player][j] != game2->discard[player][j])
branch  0 taken 0 (fallthrough)
branch  1 taken 22
        -:   69:		{
    #####:   70:			notSame++;
        -:   71:			/**/
    #####:   72:			printf("---- discard difference ----\n");
call    0 never executed
    #####:   73:			printf("original discard count: %d\n",game1->discardCount[player]);
call    0 never executed
    #####:   74:			printf("updated discard count: %d\n", game2->discardCount[player]);
call    0 never executed
        -:   75:
    #####:   76:			printf("original discard card: %d\n", game1->discard[player][j]);	
call    0 never executed
    #####:   77:			printf("updated discard card: %d\n\n", game2->discard[player][j]);
call    0 never executed
        -:   78:
        -:   79:			
        -:   80:		}
        -:   81:	}
        -:   82:
     6487:   83:	return notSame;
        -:   84:}
function copyGameState called 3205 returned 100% blocks executed 100%
     3205:   85:void copyGameState(struct gameState *game1, struct gameState *game2)
        -:   86:{
        -:   87:	int i, j, k, l, m, n, o, p, q;
     3205:   88:	game2->numPlayers = game1->numPlayers;
    89740:   89:	for(i = 0; i < (treasure_map+1); i++)
branch  0 taken 86535
branch  1 taken 3205 (fallthrough)
        -:   90:	{
    86535:   91:		game2->supplyCount[i] = game1->supplyCount[i];
    86535:   92:		game2->embargoTokens[i] = game1->embargoTokens[i]; 
        -:   93:
        -:   94:	}
    12897:   95:	for(j = 0; j < (game1->numPlayers); j++)
branch  0 taken 9692
branch  1 taken 3205 (fallthrough)
        -:   96:	{
     9692:   97:		game2->handCount[j] = game1->handCount[j];
     9692:   98:		game2->deckCount[j] = game1->deckCount[j];
     9692:   99:		game2->discardCount[j] = game1->discardCount[j];
  4855692:  100:		for(k = 0; k < MAX_DECK; k++)
branch  0 taken 4846000
branch  1 taken 9692 (fallthrough)
        -:  101:		{
  4846000:  102:			game2->deck[j][k] = game1->deck[j][k];
        -:  103:			
  4846000:  104:			game2->discard[j][k] = game1->discard[j][k];
  4846000:  105:			if(j == (MAX_PLAYERS - 1))
branch  0 taken 547000 (fallthrough)
branch  1 taken 4299000
   547000:  106:				game2->playedCards[k] = game1->playedCards[k];
        -:  107:		}
  4855692:  108:		for(l = 0; l < MAX_HAND; l++)
branch  0 taken 4846000
branch  1 taken 9692 (fallthrough)
        -:  109:		{
  4846000:  110:			game2->hand[j][l] = game1->hand[j][l];
        -:  111:
        -:  112:		}
        -:  113:	}
     3205:  114:	game2->outpostPlayed = game1->outpostPlayed;
     3205:  115:	game2->outpostTurn = game1->outpostTurn;
     3205:  116:	game2->whoseTurn = game1->whoseTurn;
     3205:  117:	game2->phase = game1->phase;
     3205:  118:	game2->numActions = game1->numActions;
     3205:  119:	game2->coins = game1->coins;
     3205:  120:	game2->numBuys = game1->numBuys;
     3205:  121:	game2->playedCardCount = game1->playedCardCount;
     3205:  122:}
        -:  123:
function cardName called 0 returned 0% blocks executed 0%
    #####:  124:char* cardName(int cardIndex)
        -:  125:{
        -:  126:	char currentCard[50];
        -:  127:
    #####:  128:	switch( cardIndex ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
branch 28 never executed
        -:  129:	{
        -:  130:		case curse:		//card 1
    #####:  131:		  strcpy(currentCard, "curse");
    #####:  132:		  break;
        -:  133:		case estate:	//card 2
    #####:  134:		  strcpy(currentCard, "estate");
    #####:  135:		  break;
        -:  136:		case duchy:		//card 3
    #####:  137:		  strcpy(currentCard, "duchy");
    #####:  138:		  break;
        -:  139:		case province:	//card 4
    #####:  140:		  strcpy(currentCard, "province");
    #####:  141:		  break;
        -:  142:		case copper:	//card 5
    #####:  143:		  strcpy(currentCard, "copper");
    #####:  144:		  break;
        -:  145:		case silver:	//card 6
    #####:  146:		  strcpy(currentCard, "silver");
    #####:  147:		  break;
        -:  148:		case gold:		//card 7
    #####:  149:		  strcpy(currentCard, "gold");
    #####:  150:		  break;
        -:  151:		case adventurer://card 8
    #####:  152:		  strcpy(currentCard, "adventurer");
    #####:  153:		  break;
        -:  154:		case council_room://card 9
    #####:  155:		  strcpy(currentCard, "council_room");
    #####:  156:		  break;
        -:  157:		case feast:		//card 10
    #####:  158:		  strcpy(currentCard, "feast");
    #####:  159:		  break;
        -:  160:		case gardens:	//card 11
    #####:  161:		  strcpy(currentCard, "gardens");
    #####:  162:		  break;
        -:  163:		case mine:		//card 12
    #####:  164:		  strcpy(currentCard, "mine");
    #####:  165:		  break;
        -:  166:		case remodel:	//card 13
    #####:  167:		  strcpy(currentCard, "remodel");
    #####:  168:		  break;
        -:  169:		case smithy:	//card 14
    #####:  170:		  strcpy(currentCard, "smithy");
    #####:  171:		  break;
        -:  172:		case village:	//card 15
    #####:  173:		  strcpy(currentCard, "village");
    #####:  174:		  break;
        -:  175:		case baron:		//card 16
    #####:  176:		  strcpy(currentCard, "baron");
    #####:  177:		  break;
        -:  178:		case great_hall://card 17
    #####:  179:		  strcpy(currentCard, "great_hall");
    #####:  180:		  break;
        -:  181:		case minion:	//card 18
    #####:  182:		  strcpy(currentCard, "minion");
    #####:  183:		  break;
        -:  184:		case steward:	//card 19
    #####:  185:		  strcpy(currentCard, "steward");
    #####:  186:		  break;
        -:  187:		case tribute:	//card 20
    #####:  188:		  strcpy(currentCard, "tribute");
    #####:  189:		  break;
        -:  190:		case ambassador://card 21
    #####:  191:		  strcpy(currentCard, "ambassador");
    #####:  192:		  break;
        -:  193:		case cutpurse:	//card 22
    #####:  194:		  strcpy(currentCard, "cutpurse");
    #####:  195:		  break;
        -:  196:		case embargo: 	//card 23
    #####:  197:		  strcpy(currentCard, "embargo");
    #####:  198:		  break;
        -:  199:		case outpost:	//card 24
    #####:  200:		  strcpy(currentCard, "outpost");
    #####:  201:		  break;
        -:  202:		case salvager:	//card 25
    #####:  203:		  strcpy(currentCard, "salvager"); 
    #####:  204:		  break;
        -:  205:		case sea_hag:	//card 26
    #####:  206:		  strcpy(currentCard, "sea_hag");
    #####:  207:		  break;
        -:  208:		case treasure_map://card 27
    #####:  209:		  strcpy(currentCard, "treasure_map");
    #####:  210:		  break;
        -:  211:		case 27: 
    #####:  212:			strcpy(currentCard, "out of bounds card");
    #####:  213:			break;
        -:  214:	}
    #####:  215:	return currentCard;
        -:  216:}
        -:  217:
function compare called 146578 returned 100% blocks executed 100%
   146578:  218:int compare(const void* a, const void* b) 
        -:  219:{
   146578:  220:	if (*(int*)a > *(int*)b)
branch  0 taken 646 (fallthrough)
branch  1 taken 145932
      646:  221:		return 1;
   145932:  222:	if (*(int*)a < *(int*)b)
branch  0 taken 39269 (fallthrough)
branch  1 taken 106663
    39269:  223:		return -1;
   106663:  224:	return 0;
        -:  225:}
        -:  226:
function newGame called 0 returned 0% blocks executed 0%
    #####:  227:struct gameState* newGame() 
        -:  228:{
    #####:  229:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:  230:	return g;
        -:  231:}
        -:  232:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:  233:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8, int k9, int k10) 
        -:  234:{
    #####:  235:	int* k = malloc(10 * sizeof(int));
    #####:  236:	k[0] = k1;
    #####:  237:	k[1] = k2;
    #####:  238:	k[2] = k3;
    #####:  239:	k[3] = k4;
    #####:  240:	k[4] = k5;
    #####:  241:	k[5] = k6;
    #####:  242:	k[6] = k7;
    #####:  243:	k[7] = k8;
    #####:  244:	k[8] = k9;
    #####:  245:	k[9] = k10;
    #####:  246:	return k;
        -:  247:}
        -:  248:
function initializeGame called 3205 returned 100% blocks executed 95%
     3205:  249:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) 
        -:  250:{
        -:  251:
        -:  252:	int i;
        -:  253:	int j;
        -:  254:	int it;			
        -:  255:	//set up random number generator
     3205:  256:	SelectStream(1);
call    0 returned 3205
     3205:  257:	PutSeed((long)randomSeed);
call    0 returned 3205
        -:  258:
        -:  259:	//check number of players
     3205:  260:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 3205 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 3205
        -:  261:	{
    #####:  262:		return -1;
        -:  263:	}
        -:  264:
        -:  265:	//set number of players
     3205:  266:	state->numPlayers = numPlayers;
        -:  267:	//printf("numPlayers: %d\n", state->numPlayers);
        -:  268:
        -:  269:	//check selected kingdom cards are different
    35255:  270:	for (i = 0; i < 10; i++)
branch  0 taken 32050
branch  1 taken 3205 (fallthrough)
        -:  271:	{
   352550:  272:		for (j = 0; j < 10; j++)
branch  0 taken 320500
branch  1 taken 32050 (fallthrough)
        -:  273:		{
   320500:  274:			if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 288450 (fallthrough)
branch  1 taken 32050
branch  2 taken 0 (fallthrough)
branch  3 taken 288450
        -:  275:			{
    #####:  276:				return -1;
        -:  277:			}
        -:  278:		}
        -:  279:	}
        -:  280:
        -:  281:
        -:  282:	//initialize supply
        -:  283:	///////////////////////////////
        -:  284:
        -:  285:	//set number of Curse cards
     3205:  286:	if (numPlayers == 2)
branch  0 taken 1017 (fallthrough)
branch  1 taken 2188
        -:  287:	{
     1017:  288:		state->supplyCount[curse] = 10;
        -:  289:	}
     2188:  290:	else if (numPlayers == 3)
branch  0 taken 1094 (fallthrough)
branch  1 taken 1094
        -:  291:	{
     1094:  292:		state->supplyCount[curse] = 20;
        -:  293:	}
        -:  294:	else
        -:  295:	{
     1094:  296:		state->supplyCount[curse] = 30;
        -:  297:	}
        -:  298:
        -:  299:	//set number of Victory cards
     3205:  300:	if (numPlayers == 2)
branch  0 taken 1017 (fallthrough)
branch  1 taken 2188
        -:  301:	{
     1017:  302:		state->supplyCount[estate] = 8;
     1017:  303:		state->supplyCount[duchy] = 8;
     1017:  304:		state->supplyCount[province] = 8;
        -:  305:	}
        -:  306:	else
        -:  307:	{
     2188:  308:		state->supplyCount[estate] = 12;
     2188:  309:		state->supplyCount[duchy] = 12;
     2188:  310:		state->supplyCount[province] = 12;
        -:  311:	}
        -:  312:
        -:  313:	//set number of Treasure cards
     3205:  314:	state->supplyCount[copper] = 60 - (7 * numPlayers);
     3205:  315:	state->supplyCount[silver] = 40;
     3205:  316:	state->supplyCount[gold] = 30;
        -:  317:
        -:  318:	//set number of Kingdom cards
    67305:  319:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 64100
branch  1 taken 3205 (fallthrough)
        -:  320:	{
   528825:  321:		for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 496775
branch  1 taken 32050 (fallthrough)
        -:  322:		{
   496775:  323:			if (kingdomCards[j] == i)
branch  0 taken 32050 (fallthrough)
branch  1 taken 464725
        -:  324:			{
        -:  325:				//check if card is a 'Victory' Kingdom card
    32050:  326:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 28845 (fallthrough)
branch  1 taken 3205
branch  2 taken 3205 (fallthrough)
branch  3 taken 25640
        -:  327:				{
    12820:  328:					if (numPlayers == 2)
branch  0 taken 2034 (fallthrough)
branch  1 taken 4376
        -:  329:					{ 
     2034:  330:						state->supplyCount[i] = 8; 
        -:  331:					}
        -:  332:					else
        -:  333:					{ 
     4376:  334:						state->supplyCount[i] = 12; 
        -:  335:					}
        -:  336:				}	
        -:  337:				else
        -:  338:				{
    25640:  339:			  		state->supplyCount[i] = 10;
        -:  340:				}
    32050:  341:			  	break;
        -:  342:			}
        -:  343:		  	else    //card is not in the set choosen for the game
        -:  344:			{
   464725:  345:				state->supplyCount[i] = -1;
        -:  346:			}
        -:  347:		}
        -:  348:
        -:  349:	}
        -:  350:
        -:  351:	////////////////////////
        -:  352:	//supply intilization complete
        -:  353:
        -:  354:	//set player decks
    12897:  355:	for (i = 0; i < numPlayers; i++)
branch  0 taken 9692
branch  1 taken 3205 (fallthrough)
        -:  356:	{
     9692:  357:		state->deckCount[i] = 0;
    38768:  358:	  	for (j = 0; j < 3; j++)
branch  0 taken 29076
branch  1 taken 9692 (fallthrough)
        -:  359:		{
    29076:  360:	  		state->deck[i][j] = estate;
    29076:  361:	  		state->deckCount[i]++;
        -:  362:		}
    77536:  363:	  	for (j = 3; j < 10; j++)
branch  0 taken 67844
branch  1 taken 9692 (fallthrough)
        -:  364:		{
    67844:  365:	  		state->deck[i][j] = copper;
    67844:  366:	  		state->deckCount[i]++;		
        -:  367:		}
        -:  368:	}
        -:  369:
        -:  370:	//shuffle player decks
    12897:  371:	for (i = 0; i < numPlayers; i++)
branch  0 taken 9692
branch  1 taken 3205 (fallthrough)
        -:  372:	{
     9692:  373:	  	if ( shuffle(i, state) < 0 )
call    0 returned 9692
branch  1 taken 0 (fallthrough)
branch  2 taken 9692
        -:  374:		{	
    #####:  375:	  	return -1;
        -:  376:		}
        -:  377:	}
        -:  378:
        -:  379:	//draw player hands
    12897:  380:	for (i = 0; i < numPlayers; i++)
branch  0 taken 9692
branch  1 taken 3205 (fallthrough)
        -:  381:	{  
        -:  382:	  	//initialize hand size to zero
     9692:  383:	  	state->handCount[i] = 0;
     9692:  384:	  	state->discardCount[i] = 0;
        -:  385:	  	//draw 5 cards
        -:  386:	  	// for (j = 0; j < 5; j++)
        -:  387:	  	//	{
        -:  388:	  	//	  drawCard(i, state);
        -:  389:	  	//	}
        -:  390:		
        -:  391:	}
        -:  392:
        -:  393:	//set embargo tokens to 0 for all supply piles
    89740:  394:	for (i = 0; i <= treasure_map; i++)
branch  0 taken 86535
branch  1 taken 3205 (fallthrough)
        -:  395:	{
    86535:  396:	  	state->embargoTokens[i] = 0;
        -:  397:	}	
        -:  398:
        -:  399:	//initialize first player's turn
     3205:  400:	state->outpostPlayed = 0;
     3205:  401:	state->phase = 0;
     3205:  402:	state->numActions = 1;
     3205:  403:	state->numBuys = 1;
     3205:  404:	state->playedCardCount = 0;
     3205:  405:	state->whoseTurn = 0;
     3205:  406:	state->handCount[state->whoseTurn] = 0;
        -:  407:	//int it; move to top
        -:  408:
        -:  409:	//Moved draw cards to here, only drawing at the start of a turn
    19230:  410:	for (it = 0; it < 5; it++)
branch  0 taken 16025
branch  1 taken 3205 (fallthrough)
        -:  411:	{
    16025:  412:		drawCard(state->whoseTurn, state);
call    0 returned 16025
        -:  413:	}
        -:  414:
     3205:  415:	updateCoins(state->whoseTurn, state, 0);
call    0 returned 3205
        -:  416:
     3205:  417:	return 0;
        -:  418:}
        -:  419:
function shuffle called 69960 returned 100% blocks executed 100%
    69960:  420:int shuffle(int player, struct gameState *state) 
        -:  421:{
        -:  422: 
        -:  423:
        -:  424:  int newDeck[MAX_DECK];
    69960:  425:  int newDeckPos = 0;
        -:  426:  int card;
        -:  427:  int i;
        -:  428:
    69960:  429:  if (state->deckCount[player] < 1)
branch  0 taken 60098 (fallthrough)
branch  1 taken 9862
    60098:  430:    return -1;
     9862:  431:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 9862
        -:  432:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  433:
   117494:  434:  while (state->deckCount[player] > 0) {
branch  0 taken 97770
branch  1 taken 9862 (fallthrough)
    97770:  435:    card = floor(Random() * state->deckCount[player]);
call    0 returned 97770
    97770:  436:    newDeck[newDeckPos] = state->deck[player][card];
    97770:  437:    newDeckPos++;
   339973:  438:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 242203
branch  1 taken 97770 (fallthrough)
   242203:  439:      state->deck[player][i] = state->deck[player][i+1];
        -:  440:    }
    97770:  441:    state->deckCount[player]--;
        -:  442:  }
   107632:  443:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 97770
branch  1 taken 9862 (fallthrough)
    97770:  444:    state->deck[player][i] = newDeck[i];
    97770:  445:    state->deckCount[player]++;
        -:  446:  }
        -:  447:
     9862:  448:  return 0;
        -:  449:}
        -:  450:
function playCard called 0 returned 0% blocks executed 0%
    #####:  451:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  452:{	
        -:  453:  int card;
    #####:  454:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  455:
        -:  456:  //check if it is the right phase
    #####:  457:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  458:    {
    #####:  459:      return -1;
        -:  460:    }
        -:  461:	
        -:  462:  //check if player has enough actions
    #####:  463:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  464:    {
    #####:  465:      return -1;
        -:  466:    }
        -:  467:	
        -:  468:  //get card played
    #####:  469:  card = handCard(handPos, state);
call    0 never executed
        -:  470:	
        -:  471:  //check if selected card is an action
    #####:  472:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  473:    {
    #####:  474:      return -1;
        -:  475:    }
        -:  476:	
        -:  477:  //play card
    #####:  478:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  479:    {
    #####:  480:      return -1;
        -:  481:    }
        -:  482:	
        -:  483:  //reduce number of actions
    #####:  484:  state->numActions--;
        -:  485:
        -:  486:  //update coins (Treasure cards may be added with card draws)
    #####:  487:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  488:	
    #####:  489:  return 0;
        -:  490:}
        -:  491:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  492:int buyCard(int supplyPos, struct gameState *state) {
        -:  493:  int who;
        -:  494:  if (DEBUG){
        -:  495:    printf("Entering buyCard...\n");
        -:  496:  }
        -:  497:
        -:  498:  // I don't know what to do about the phase thing.
        -:  499:
    #####:  500:  who = state->whoseTurn;
        -:  501:
    #####:  502:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  503:    if (DEBUG)
        -:  504:      printf("You do not have any buys left\n");
    #####:  505:    return -1;
    #####:  506:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  507:    if (DEBUG)
        -:  508:      printf("There are not any of that type of card left\n");
    #####:  509:    return -1;
    #####:  510:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  511:    if (DEBUG) 
        -:  512:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  513:    return -1;
        -:  514:  } else {
    #####:  515:    state->phase=1;
        -:  516:    //state->supplyCount[supplyPos]--;
    #####:  517:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  518:  
    #####:  519:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  520:    state->numBuys--;
        -:  521:    if (DEBUG)
        -:  522:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  523:  }
        -:  524:
        -:  525:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  526:  //state->discardCount[who]++;
        -:  527:    
    #####:  528:  return 0;
        -:  529:}
        -:  530:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  531:int numHandCards(struct gameState *state) {
    #####:  532:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  533:}
        -:  534:
function handCard called 0 returned 0% blocks executed 0%
    #####:  535:int handCard(int handPos, struct gameState *state) {
    #####:  536:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  537:  return state->hand[currentPlayer][handPos];
        -:  538:}
        -:  539:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  540:int supplyCount(int card, struct gameState *state) {
    #####:  541:  return state->supplyCount[card];
        -:  542:}
        -:  543:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  544:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  545:  int i;
    #####:  546:  int count = 0;
        -:  547:
    #####:  548:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  549:    {
    #####:  550:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  551:    }
        -:  552:
    #####:  553:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  554:    {
    #####:  555:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  556:    }
        -:  557:
    #####:  558:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  559:    {
    #####:  560:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  561:    }
        -:  562:
    #####:  563:  return count;
        -:  564:}
        -:  565:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  566:int whoseTurn(struct gameState *state) {
    #####:  567:  return state->whoseTurn;
        -:  568:}
        -:  569:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  570:int endTurn(struct gameState *state) {
        -:  571:  int k;
        -:  572:  int i;
    #####:  573:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  574:  
        -:  575:  //Discard hand
    #####:  576:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  577:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  578:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  579:  }
    #####:  580:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  581:    
        -:  582:  //Code for determining the player
    #####:  583:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  584:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  585:  }
        -:  586:  else{
    #####:  587:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  588:  }
        -:  589:
    #####:  590:  state->outpostPlayed = 0;
    #####:  591:  state->phase = 0;
    #####:  592:  state->numActions = 1;
    #####:  593:  state->coins = 0;
    #####:  594:  state->numBuys = 1;
    #####:  595:  state->playedCardCount = 0;
    #####:  596:  state->handCount[state->whoseTurn] = 0;
        -:  597:
        -:  598:  //int k; move to top
        -:  599:  //Next player draws hand
    #####:  600:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  601:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  602:  }
        -:  603:
        -:  604:  //Update money
    #####:  605:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  606:
    #####:  607:  return 0;
        -:  608:}
        -:  609:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  610:int isGameOver(struct gameState *state) 
        -:  611:{
        -:  612:	int i;
        -:  613:	int j;
        -:  614:	
        -:  615:	//if stack of Province cards is empty, the game ends
    #####:  616:	if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  617:    {
    #####:  618:    	return 1;
        -:  619:    }
        -:  620:
        -:  621:	//if three supply pile are at 0, the game ends
    #####:  622:	j = 0;
    #####:  623:	for (i = 0; i < 25; i++) //shouldn't this be 27?
branch  0 never executed
branch  1 never executed
        -:  624:    {
    #####:  625:    	if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  626:		{
    #####:  627:	  		j++;
        -:  628:		}
        -:  629:    }
    #####:  630:  	if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  631:    {
    #####:  632:      	return 1;
        -:  633:    }
        -:  634:
    #####:  635:  	return 0;
        -:  636:}
        -:  637:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  638:int scoreFor (int player, struct gameState *state) {
        -:  639:
        -:  640:  int i;
    #####:  641:  int score = 0;
        -:  642:  //score from hand
    #####:  643:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  644:    {
    #####:  645:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  646:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  647:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  648:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  649:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  650:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  651:    }
        -:  652:
        -:  653:  //score from discard
    #####:  654:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  655:    {
    #####:  656:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  657:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  658:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  659:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  660:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  661:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  662:    }
        -:  663:
        -:  664:  //score from deck
    #####:  665:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  666:    {
    #####:  667:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  668:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  669:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  670:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  671:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  672:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  673:    }
        -:  674:
    #####:  675:  return score;
        -:  676:}
        -:  677:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  678:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  679:  int i;	
        -:  680:  int j;
        -:  681:  int highScore;
        -:  682:  int currentPlayer;
        -:  683:
        -:  684:  //get score for each player
    #####:  685:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  686:    {
        -:  687:      //set unused player scores to -9999
    #####:  688:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  689:	{
    #####:  690:	  players[i] = -9999;
        -:  691:	}
        -:  692:      else
        -:  693:	{
    #####:  694:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  695:	}
        -:  696:    }
        -:  697:
        -:  698:  //find highest score
    #####:  699:  j = 0;
    #####:  700:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  701:    {
    #####:  702:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  703:	{
    #####:  704:	  j = i;
        -:  705:	}
        -:  706:    }
    #####:  707:  highScore = players[j];
        -:  708:
        -:  709:  //add 1 to players who had less turns
    #####:  710:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  711:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  712:    {
    #####:  713:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  714:	{
    #####:  715:	  players[i]++;
        -:  716:	}
        -:  717:    }
        -:  718:
        -:  719:  //find new highest score
    #####:  720:  j = 0;
    #####:  721:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  722:    {
    #####:  723:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  724:	{
    #####:  725:	  j = i;
        -:  726:	}
        -:  727:    }
    #####:  728:  highScore = players[j];
        -:  729:
        -:  730:  //set winners in array to 1 and rest to 0
    #####:  731:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  732:    {
    #####:  733:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  734:	{
    #####:  735:	  players[i] = 1;
        -:  736:	}
        -:  737:      else
        -:  738:	{
    #####:  739:	  players[i] = 0;
        -:  740:	}
        -:  741:    }
        -:  742:
    #####:  743:  return 0;
        -:  744:}
        -:  745:
function drawCard called 50843 returned 100% blocks executed 100%
    50843:  746:int drawCard(int player, struct gameState *state)
        -:  747:{	
        -:  748:	int count;
        -:  749:	int deckCounter;
    50843:  750:	if (state->deckCount[player] <= 0)
branch  0 taken 30134 (fallthrough)
branch  1 taken 20709
        -:  751:	{//Deck is empty
        -:  752:
        -:  753:		//Step 1 Shuffle the discard pile back into a deck
        -:  754:		int i;
        -:  755:		//Move discard to deck
    30984:  756:		for (i = 0; i < state->discardCount[player];i++)
branch  0 taken 850
branch  1 taken 30134 (fallthrough)
        -:  757:		{
      850:  758:			state->deck[player][i] = state->discard[player][i];
      850:  759:			state->discard[player][i] = -1;
        -:  760:		}
        -:  761:
    30134:  762:		state->deckCount[player] = state->discardCount[player];
    30134:  763:		state->discardCount[player] = 0;//Reset discard
        -:  764:
        -:  765:		//Shufffle the deck
    30134:  766:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 30134
        -:  767:
        -:  768:		if (DEBUG)
        -:  769:		{//Debug statements
        -:  770:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  771:		}
        -:  772:
    30134:  773:		state->discardCount[player] = 0;
        -:  774:
        -:  775:		//Step 2 Draw Card
    30134:  776:		count = state->handCount[player];//Get current player's hand count
        -:  777:
        -:  778:		if (DEBUG)
        -:  779:		{//Debug statements
        -:  780:			printf("Current hand count: %d\n", count);
        -:  781:		}
        -:  782:
    30134:  783:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  784:
    30134:  785:		if (deckCounter == 0)
branch  0 taken 29964 (fallthrough)
branch  1 taken 170
    29964:  786:			return -1;
        -:  787:
      170:  788:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      170:  789:		state->deckCount[player]--;
      170:  790:		state->handCount[player]++;//Increment hand count
        -:  791:	}
        -:  792:
        -:  793:	else
        -:  794:	{
    20709:  795:		int count = state->handCount[player];//Get current hand count for player
        -:  796:		int deckCounter;
        -:  797:		if (DEBUG){//Debug statements
        -:  798:		printf("Current hand count: %d\n", count);
        -:  799:	}
        -:  800:
    20709:  801:	deckCounter = state->deckCount[player];//Create holder for the deck count
    20709:  802:	state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    20709:  803:	state->deckCount[player]--;
    20709:  804:	state->handCount[player]++;//Increment hand count
        -:  805:}
        -:  806:
    20879:  807:return 0;
        -:  808:}
        -:  809:
function getCost called 0 returned 0% blocks executed 0%
    #####:  810:int getCost(int cardNumber)
        -:  811:{
    #####:  812:	switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  813:    {
        -:  814:    case curse:		//card 1
    #####:  815:      return 0;
        -:  816:    case estate:	//card 2
    #####:  817:      return 2;
        -:  818:    case duchy:		//card 3
    #####:  819:      return 5;
        -:  820:    case province:	//card 4
    #####:  821:      return 8;
        -:  822:    case copper:	//card 5
    #####:  823:      return 0;
        -:  824:    case silver:	//card 6
    #####:  825:      return 3;
        -:  826:    case gold:		//card 7
    #####:  827:      return 6;
        -:  828:    case adventurer://card 8
    #####:  829:      return 6;
        -:  830:    case council_room://card 9
    #####:  831:      return 5;
        -:  832:    case feast:		//card 10
    #####:  833:      return 4;
        -:  834:    case gardens:	//card 11
    #####:  835:      return 4;
        -:  836:    case mine:		//card 12
    #####:  837:      return 5;
        -:  838:    case remodel:	//card 13
    #####:  839:      return 4;
        -:  840:    case smithy:	//card 14
    #####:  841:      return 4;
        -:  842:    case village:	//card 15
    #####:  843:      return 3;
        -:  844:    case baron:		//card 16
    #####:  845:      return 4;
        -:  846:    case great_hall://card 17
    #####:  847:      return 3;
        -:  848:    case minion:	//card 18
    #####:  849:      return 5;
        -:  850:    case steward:	//card 19
    #####:  851:      return 3;
        -:  852:    case tribute:	//card 20
    #####:  853:      return 5;
        -:  854:    case ambassador://card 21
    #####:  855:      return 3;
        -:  856:    case cutpurse:	//card 22
    #####:  857:      return 4;
        -:  858:    case embargo: 	//card 23
    #####:  859:      return 2;
        -:  860:    case outpost:	//card 24
    #####:  861:      return 5;
        -:  862:    case salvager:	//card 25
    #####:  863:      return 4;
        -:  864:    case sea_hag:	//card 26
    #####:  865:      return 4;
        -:  866:    case treasure_map://card 27
    #####:  867:      return 4;
        -:  868:    }
        -:  869:	
    #####:  870:  return -1;
        -:  871:}
        -:  872:
        -:  873://below are the actions for the modified cards for assignment 2
function smithy_action called 0 returned 0% blocks executed 0%
    #####:  874:int smithy_action(struct gameState *state, int handPos, int currentPlayer)
        -:  875:{
    #####:  876:	int i = 0;
        -:  877:	//+3 Cards changed to 4 cards drawn on 7/6/2017 for assignment2
    #####:  878:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  879:	{
    #####:  880:	  	drawCard(currentPlayer, state);
call    0 never executed
        -:  881:	}
        -:  882:			
        -:  883:    //discard card from hand
    #####:  884:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  885:    return 0;
        -:  886:	
        -:  887:}
        -:  888:
function adventurer_action called 202 returned 100% blocks executed 100%
      202:  889:int adventurer_action(struct gameState *state, int handPos, int currentPlayer)
        -:  890:{
        -:  891:	int cardDrawn, drawntreasure, z;
      202:  892:	drawntreasure = 0;
      202:  893:	z = 0;
        -:  894:	int temphand[MAX_HAND];
        -:  895:	//adventurer actions here
    31218:  896:	while(drawntreasure<2)
branch  0 taken 30814
branch  1 taken 202 (fallthrough)
        -:  897:	{
    30814:  898:		if (state->deckCount[currentPlayer] <1)
branch  0 taken 30134 (fallthrough)
branch  1 taken 680
        -:  899:		{//if the deck is empty we need to shuffle discard and add to deck
    30134:  900:			shuffle(currentPlayer, state);
call    0 returned 30134
        -:  901:			//printf("deck is empty inside adventurer, reshuffling\n");
        -:  902:			//getchar();
        -:  903:		}
    30814:  904:		drawCard(currentPlayer, state);
call    0 returned 30814
    30814:  905:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  906:		//printf("The current card played is a: %d\n", cardDrawn);
    30814:  907:		if (cardDrawn == gold || cardDrawn == silver)
branch  0 taken 30749 (fallthrough)
branch  1 taken 65
branch  2 taken 71 (fallthrough)
branch  3 taken 30678
        -:  908:		{
        -:  909:			//printf("The treasure drawn is a: %d\n", cardDrawn);
      136:  910:	  		drawntreasure++;
        -:  911:			//printf("Card Drawn is either gold or silver\n");
        -:  912:			//getchar();
        -:  913:		}
    30678:  914:		else if(cardDrawn == copper)
branch  0 taken 136 (fallthrough)
branch  1 taken 30542
        -:  915:		{
      136:  916:			drawntreasure += 2;
        -:  917:		}
        -:  918:		else
        -:  919:		{
        -:  920:			//printf("The non treasure discard is a: %d\n", cardDrawn);
    30542:  921:	  		temphand[(z)]=cardDrawn;
    30542:  922:	  		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    30542:  923:	  		(z)++;
        -:  924:		}
        -:  925:    }
    12547:  926:    while((z)-1>=0)
branch  0 taken 12143
branch  1 taken 202 (fallthrough)
        -:  927:	{
    12143:  928:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[(z)-1]; // discard all cards in play that have been drawn
    12143:  929:		(z)=(z)-1;
        -:  930:    }
        -:  931:	//printf("in here");
      202:  932:    return 0;
        -:  933:}
        -:  934:
function great_hall_action called 1001 returned 100% blocks executed 100%
     1001:  935:int great_hall_action(struct gameState *state, int currentPlayer, int handPos)
        -:  936:{
        -:  937:	int i;
        -:  938:	//+1 Card
     1001:  939:	drawCard(currentPlayer, state);
call    0 returned 1001
        -:  940:
        -:  941:	//+1 Actions
     1001:  942:	state->numActions++;
        -:  943:	/*
        -:  944:	printf("The currently randomly chosen player is player %d\n", currentPlayer);
        -:  945:	for( i = 0; i < state->numPlayers; i++)
        -:  946:	{
        -:  947:		printf("hand count for player %d before discardCard() called : %d\n", i, state->handCount[i]);
        -:  948:	}*/
        -:  949:	//discard card from hand
     1001:  950:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 1001
        -:  951:	//
        -:  952:	/*
        -:  953:	for( i = 0; i < state->numPlayers; i++)
        -:  954:	{
        -:  955:		printf("hand count for player %d after discardCard() called: %d\n", i, state->handCount[i]);
        -:  956:	}
        -:  957:	*/
     1001:  958:	drawCard(currentPlayer, state);
call    0 returned 1001
     1001:  959:	return 0;
        -:  960:	
        -:  961:}
        -:  962:
function embargo_action called 0 returned 0% blocks executed 0%
    #####:  963:int embargo_action(struct gameState *state, int handPos, int currentPlayer, int choice1)
        -:  964:{
        -:  965:	//printf("Init Coins: %d\n", state->coins);
        -:  966:	//+2 Coins
    #####:  967:	state->coins = state->coins + 2;
        -:  968:
        -:  969:	//printf("final Coins: %d\n", state->coins);
        -:  970:		
        -:  971:	//see if selected pile is in play
    #####:  972:	if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  973:	{
    #####:  974:		return -1;
        -:  975:	}
        -:  976:		
        -:  977:	//add embargo token to selected supply pile
    #####:  978:	state->embargoTokens[choice1]++;
        -:  979:		
        -:  980:	//trash card
    #####:  981:	discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  982:	if(state->coins > 3)
branch  0 never executed
branch  1 never executed
        -:  983:	{
        -:  984:		//end game
        -:  985:
    #####:  986:		printf("you lose \n");
call    0 never executed
    #####:  987:		exit(-1);
call    0 never executed
        -:  988:	}
        -:  989:
    #####:  990:	return 0;
        -:  991:
        -:  992:}
        -:  993:
function outpost_action called 0 returned 0% blocks executed 0%
    #####:  994:int outpost_action(struct gameState *state, int handPos, int currentPlayer, int p, int q)
        -:  995:{
        -:  996:	//if the player has an embargo in their hand the current player loses al of their cards
    #####:  997:	for(p = 0;p < state->handCount[currentPlayer]; p++)
branch  0 never executed
branch  1 never executed
        -:  998:	{
    #####:  999:		if(state->hand[currentPlayer][p] == embargo)
branch  0 never executed
branch  1 never executed
        -: 1000:		{
    #####: 1001:			for(q = 0; q < state->handCount[currentPlayer]; q++)
branch  0 never executed
branch  1 never executed
        -: 1002:			{
    #####: 1003:				discardCard(q, currentPlayer, state, 0);
call    0 never executed
        -: 1004:			}
    #####: 1005:			break;
        -: 1006:		}
        -: 1007:	}
        -: 1008:	//set outpost flag
    #####: 1009:	state->outpostPlayed++;
        -: 1010:		
        -: 1011:	//discard card
    #####: 1012:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1013:	return 0;
        -: 1014:}
        -: 1015:
function village_action called 2002 returned 100% blocks executed 100%
     2002: 1016:int village_action(struct gameState *state, int handPos, int currentPlayer) 
        -: 1017:{
        -: 1018:	//+1 Card
     2002: 1019:	drawCard(currentPlayer, state);
call    0 returned 2002
        -: 1020:		
        -: 1021:	//+2 Actions
     2002: 1022:	state->numActions = state->numActions + 2;
        -: 1023:		
        -: 1024:	//discard played card from hand
     2002: 1025:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 2002
     2002: 1026:	return 0;
        -: 1027:
        -: 1028:}
        -: 1029:
function cardEffect called 0 returned 0% blocks executed 0%
    #####: 1030:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -: 1031:{
        -: 1032:  int i;
        -: 1033:  int j;
        -: 1034:  int k;
        -: 1035:  int x;
        -: 1036:  int p;
        -: 1037:  int q;
        -: 1038:  int index;
    #####: 1039:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####: 1040:  int nextPlayer = currentPlayer + 1;
        -: 1041:
    #####: 1042:  int tributeRevealedCards[2] = {-1, -1};
        -: 1043:  int temphand[MAX_HAND];// moved above the if statement
    #####: 1044:  int drawntreasure=0;
        -: 1045:  int cardDrawn;
        -: 1046:
        -: 1047:	int zzz;
        -: 1048:	int adventure;
    #####: 1049:  int z = 0;// this is the counter for the temp hand
    #####: 1050:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####: 1051:    nextPlayer = 0;
        -: 1052:  }
        -: 1053:  
        -: 1054:	
        -: 1055:  //uses switch to select card and perform actions
    #####: 1056:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -: 1057:	{
        -: 1058:    case adventurer:
    #####: 1059:		adventure = adventurer_action(state, handPos, currentPlayer);
call    0 never executed
    #####: 1060:		return adventure;
        -: 1061:			
        -: 1062:    case council_room:
        -: 1063:      	//+4 Cards
    #####: 1064:      	for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1065:		{
    #####: 1066:	  		drawCard(currentPlayer, state);
call    0 never executed
        -: 1067:		}
        -: 1068:			
        -: 1069:      	//+1 Buy
    #####: 1070:      	state->numBuys++;
        -: 1071:			
        -: 1072:      	//Each other player draws a card
    #####: 1073:      	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1074:		{
    #####: 1075:	  		if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1076:	    	{
    #####: 1077:	      		drawCard(i, state);
call    0 never executed
        -: 1078:	    	}
        -: 1079:		}
        -: 1080:			
        -: 1081:      	//put played card in played card pile
    #####: 1082:      	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1083:			
    #####: 1084:      	return 0;
        -: 1085:			
        -: 1086:    case feast:
        -: 1087:      	//gain card with cost up to 5
        -: 1088:      	//Backup hand
    #####: 1089:      	for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1090:		{
    #####: 1091:			temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1092:			state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1093:      	}
        -: 1094:      	//Backup hand
        -: 1095:
        -: 1096:      	//Update Coins for Buy
    #####: 1097:      	updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1098:      	x = 1;//Condition to loop on
    #####: 1099:      	while( x == 1) 
branch  0 never executed
branch  1 never executed
        -: 1100:		{//Buy one card
    #####: 1101:			if (supplyCount(choice1, state) <= 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1102:			{
        -: 1103:	  			if (DEBUG)
        -: 1104:	    			printf("None of that card left, sorry!\n");
        -: 1105:
        -: 1106:	  			if (DEBUG)
        -: 1107:				{
        -: 1108:	    			printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1109:	  			}
        -: 1110:			}
    #####: 1111:			else if (state->coins < getCost(choice1))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1112:			{
    #####: 1113:	  			printf("That card is too expensive!\n");
call    0 never executed
        -: 1114:
        -: 1115:	  			if (DEBUG)
        -: 1116:				{
        -: 1117:	    			printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1118:	  			}
        -: 1119:			}
        -: 1120:			else
        -: 1121:			{
        -: 1122:
        -: 1123:	  			if (DEBUG)
        -: 1124:				{
        -: 1125:	    			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1126:	  			}
        -: 1127:
    #####: 1128:	  			gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1129:	  			x = 0;//No more buying cards
        -: 1130:
        -: 1131:	  			if (DEBUG)
        -: 1132:				{
        -: 1133:	    			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1134:	  			}
        -: 1135:
        -: 1136:			}
        -: 1137:      	}     
        -: 1138:
        -: 1139:      	//Reset Hand
    #####: 1140:      	for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:		{
    #####: 1142:			state->hand[currentPlayer][i] = temphand[i];
    #####: 1143:			temphand[i] = -1;
        -: 1144:      	}
        -: 1145:      	//Reset Hand
        -: 1146:      			
    #####: 1147:      	return 0;
        -: 1148:			
        -: 1149:    case gardens:
    #####: 1150:      	return -1;
        -: 1151:			
        -: 1152:    case mine:
    #####: 1153:      	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1154:
    #####: 1155:      	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1156:		{
    #####: 1157:	  	return -1;
        -: 1158:		}
        -: 1159:		
    #####: 1160:      	if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1161:		{
    #####: 1162:	  		return -1;
        -: 1163:		}
        -: 1164:
    #####: 1165:      	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1166:		{
    #####: 1167:	  		return -1;
        -: 1168:		}
        -: 1169:
    #####: 1170:      	gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1171:
        -: 1172:      	//discard card from hand
    #####: 1173:      	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1174:
        -: 1175:      	//discard trashed card
    #####: 1176:      	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1177:		{
    #####: 1178:	  		if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1179:	    	{
    #####: 1180:	      		discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1181:	      		break;
        -: 1182:	    	}
        -: 1183:		}
        -: 1184:			
    #####: 1185:      	return 0;
        -: 1186:			
        -: 1187:    case remodel:
    #####: 1188:      	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1189:
    #####: 1190:      	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1191:		{
    #####: 1192:	  		return -1;
        -: 1193:		}
        -: 1194:
    #####: 1195:      	gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1196:
        -: 1197:      	//discard card from hand
    #####: 1198:      	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1199:
        -: 1200:      	//discard trashed card
    #####: 1201:      	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1202:		{	
    #####: 1203:	  		if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1204:	    	{
    #####: 1205:	      		discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1206:	      		break;
        -: 1207:	    	}
        -: 1208:		}
        -: 1209:
        -: 1210:
    #####: 1211:      	return 0;
        -: 1212:		
        -: 1213:    case smithy:
    #####: 1214:      	return smithy_action(state, handPos, currentPlayer);		
call    0 never executed
        -: 1215:    case village:
    #####: 1216:		return village_action(state, handPos, currentPlayer);		
call    0 never executed
        -: 1217:    case baron:
    #####: 1218:      	state->numBuys++;//Increase buys by 1!
    #####: 1219:      	if (choice1 > 0)
branch  0 never executed
branch  1 never executed
        -: 1220:		{//Boolean true or going to discard an estate
    #####: 1221:			int p = 0;//Iterator for hand!
    #####: 1222:			int card_not_discarded = 1;//Flag for discard set!
    #####: 1223:			while(card_not_discarded)
branch  0 never executed
branch  1 never executed
        -: 1224:			{
    #####: 1225:	  			if (state->hand[currentPlayer][p] == estate)
branch  0 never executed
branch  1 never executed
        -: 1226:				{//Found an estate card!
    #####: 1227:	    			state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1228:	    			state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1229:	    			state->discardCount[currentPlayer]++;
    #####: 1230:	    			for (;p < state->handCount[currentPlayer]; p++)
branch  0 never executed
branch  1 never executed
        -: 1231:					{
    #####: 1232:	      				state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1233:	    			}
    #####: 1234:	    			state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1235:	    			state->handCount[currentPlayer]--;
    #####: 1236:	    			card_not_discarded = 0;//Exit the loop
        -: 1237:	  			}
    #####: 1238:	  			else if (p > state->handCount[currentPlayer])
branch  0 never executed
branch  1 never executed
        -: 1239:				{
        -: 1240:	    			if(DEBUG) 
        -: 1241:					{
        -: 1242:	      				printf("No estate cards in your hand, invalid choice\n");
        -: 1243:	      				printf("Must gain an estate if there are any\n");
        -: 1244:	    			}
    #####: 1245:	    			if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1246:					{
    #####: 1247:	      				gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1248:	      				state->supplyCount[estate]--;//Decrement estates
    #####: 1249:	      				if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1250:						{
    #####: 1251:							isGameOver(state);
call    0 never executed
        -: 1252:	      				}
        -: 1253:	    			}
    #####: 1254:	    			card_not_discarded = 0;//Exit the loop
        -: 1255:	  			}
        -: 1256:			    
        -: 1257:	  			else
        -: 1258:				{
    #####: 1259:	    			p++;//Next card
        -: 1260:	  			}
        -: 1261:			}
        -: 1262:      	}
        -: 1263:			    
        -: 1264:      	else
        -: 1265:		{
    #####: 1266:			if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1267:			{
    #####: 1268:	  			gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1269:	  			state->supplyCount[estate]--;//Decrement Estates
    #####: 1270:	  			if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1271:				{
    #####: 1272:	    			isGameOver(state);
call    0 never executed
        -: 1273:	  			}
        -: 1274:			}
        -: 1275:      	}
        -: 1276:	    
        -: 1277:      
    #####: 1278:      	return 0;
        -: 1279:		
        -: 1280:    case great_hall:
        -: 1281:
    #####: 1282:		return great_hall_action(state, currentPlayer, handPos);
call    0 never executed
        -: 1283:		
        -: 1284:    case minion:
        -: 1285:      	//+1 action
    #####: 1286:      	state->numActions++;
        -: 1287:			
        -: 1288:      	//discard card from hand
    #####: 1289:      	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1290:			
    #####: 1291:      	if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1292:		{
    #####: 1293:	  		state->coins = state->coins + 2;
        -: 1294:		}
        -: 1295:			
    #####: 1296:      	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1297:		{
        -: 1298:	  		//discard hand
    #####: 1299:	  		while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1300:	    	{
    #####: 1301:	      		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1302:	    	}
        -: 1303:				
        -: 1304:	  		//draw 4
    #####: 1305:	  		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1306:	    	{
    #####: 1307:	      		drawCard(currentPlayer, state);
call    0 never executed
        -: 1308:	    	}
        -: 1309:				
        -: 1310:	  		//other players discard hand and redraw if hand size > 4
    #####: 1311:	  		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1312:	    	{
    #####: 1313:	      		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1314:				{
    #####: 1315:		  			if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1316:		    		{
        -: 1317:		      			//discard hand
    #####: 1318:		      			while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1319:						{
    #####: 1320:			  				discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1321:						}
        -: 1322:							
        -: 1323:		      			//draw 4
    #####: 1324:		      			for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1325:						{
    #####: 1326:			  				drawCard(i, state);
call    0 never executed
        -: 1327:						}
        -: 1328:		    		}
        -: 1329:				}
        -: 1330:	    	}
        -: 1331:				
        -: 1332:		}
    #####: 1333:      	return 0;
        -: 1334:		
        -: 1335:    case steward:
    #####: 1336:      	if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1337:		{
        -: 1338:	  		//+2 cards
    #####: 1339:	  		drawCard(currentPlayer, state);
call    0 never executed
    #####: 1340:	  		drawCard(currentPlayer, state);
call    0 never executed
        -: 1341:		}
    #####: 1342:      	else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1343:		{
        -: 1344:	  		//+2 coins
    #####: 1345:	  		state->coins = state->coins + 2;
        -: 1346:		}
        -: 1347:      	else
        -: 1348:		{
        -: 1349:	  		//trash 2 cards in hand
    #####: 1350:	  		discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1351:	  		discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1352:		}
        -: 1353:			
        -: 1354:      	//discard card from hand
    #####: 1355:      	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1356:      	return 0;
        -: 1357:		
        -: 1358:    case tribute:
    #####: 1359:      	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
branch  0 never executed
branch  1 never executed
        -: 1360:		{
    #####: 1361:			if (state->deckCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1362:			{
    #####: 1363:	  			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1364:	  			state->deckCount[nextPlayer]--;
        -: 1365:			}
    #####: 1366:			else if (state->discardCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1367:			{
    #####: 1368:	  			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1369:	  			state->discardCount[nextPlayer]--;
        -: 1370:			}
        -: 1371:			else
        -: 1372:			{
        -: 1373:	  			//No Card to Reveal
        -: 1374:	  			if (DEBUG)
        -: 1375:				{
        -: 1376:	    			printf("No cards to reveal\n");
        -: 1377:	  			}
        -: 1378:			}
        -: 1379:      	}
        -: 1380:	    
        -: 1381:      	else
        -: 1382:		{
    #####: 1383:			if (state->deckCount[nextPlayer] == 0)
branch  0 never executed
branch  1 never executed
        -: 1384:			{
    #####: 1385:	  			for (i = 0; i < state->discardCount[nextPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1386:				{
    #####: 1387:	    			state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1388:	    			state->deckCount[nextPlayer]++;
    #####: 1389:	    			state->discard[nextPlayer][i] = -1;
    #####: 1390:	    			state->discardCount[nextPlayer]--;
        -: 1391:	  			}
        -: 1392:			    
    #####: 1393:	  			shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1394:			} 
    #####: 1395:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1396:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1397:			state->deckCount[nextPlayer]--;
    #####: 1398:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1399:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1400:		state->deckCount[nextPlayer]--;
        -: 1401:      	}    
        -: 1402:		       
    #####: 1403:      	if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 never executed
branch  1 never executed
        -: 1404:		{//If we have a duplicate card, just drop one 
    #####: 1405:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1406:			state->playedCardCount++;
    #####: 1407:			tributeRevealedCards[1] = -1;
        -: 1408:      	}
        -: 1409:
    #####: 1410:      	for (i = 0; i <= 2; i ++)
branch  0 never executed
branch  1 never executed
        -: 1411:		{
    #####: 1412:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1413:			{//Treasure cards
    #####: 1414:	  			state->coins += 2;
        -: 1415:			}
        -: 1416:		    
    #####: 1417:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1418:			{//Victory Card Found
    #####: 1419:	  			drawCard(currentPlayer, state);
call    0 never executed
    #####: 1420:	  			drawCard(currentPlayer, state);
call    0 never executed
        -: 1421:			}
        -: 1422:			else
        -: 1423:			{//Action Card
    #####: 1424:	  			state->numActions = state->numActions + 2;
        -: 1425:			}
        -: 1426:      	}
        -: 1427:	    
    #####: 1428:      	return 0;
        -: 1429:		
        -: 1430:    case ambassador:
    #####: 1431:      	j = 0;		//used to check if player has enough cards to discard
        -: 1432:
    #####: 1433:      	if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1434:		{
    #####: 1435:	  		return -1;				
        -: 1436:		}
        -: 1437:
    #####: 1438:      	if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1439:		{
    #####: 1440:	  		return -1;
        -: 1441:		}
        -: 1442:
    #####: 1443:      	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1444:		{
    #####: 1445:	  		if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1446:	    	{
    #####: 1447:	      		j++;
        -: 1448:	    	}
        -: 1449:		}
    #####: 1450:      	if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1451:		{
    #####: 1452:	  		return -1;				
        -: 1453:		}
        -: 1454:
        -: 1455:      	if (DEBUG) 
        -: 1456:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1457:
        -: 1458:      		//increase supply count for choosen card by amount being discarded
    #####: 1459:      		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1460:			
        -: 1461:      		//each other player gains a copy of revealed card
    #####: 1462:      	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1463:		{
    #####: 1464:	  		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1465:	    	{
    #####: 1466:	      		gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1467:	    	}
        -: 1468:		}
        -: 1469:
        -: 1470:      	//discard played card from hand
    #####: 1471:      	discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1472:
        -: 1473:      	//trash copies of cards returned to supply
    #####: 1474:      	for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1475:		{
    #####: 1476:	  		for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1477:	    	{
    #####: 1478:	      		if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1479:				{
    #####: 1480:		  			discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1481:		  			break;
        -: 1482:				}
        -: 1483:	    	}
        -: 1484:		}			
        -: 1485:
    #####: 1486:      return 0;
        -: 1487:		
        -: 1488:    case cutpurse:
        -: 1489:
    #####: 1490:      	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1491:      	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1492:		{
    #####: 1493:	  		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1494:	    	{
    #####: 1495:	      		for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1496:				{
    #####: 1497:		  			if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1498:		    		{
    #####: 1499:		      			discardCard(j, i, state, 0);
call    0 never executed
    #####: 1500:		      			break;
        -: 1501:		    		}
    #####: 1502:		  			if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1503:		    		{
    #####: 1504:		      			for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1505:						{
        -: 1506:			  				if (DEBUG)
        -: 1507:			    				printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1508:						}	
    #####: 1509:		      			break;
        -: 1510:		    		}		
        -: 1511:				}
        -: 1512:					
        -: 1513:	    	}
        -: 1514:				
        -: 1515:		}				
        -: 1516:
        -: 1517:      	//discard played card from hand
    #####: 1518:      	discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1519:
    #####: 1520:      	return 0;
        -: 1521:
        -: 1522:		
        -: 1523:    case embargo: 
        -: 1524:		//embargo_action(struct gameState *state, handPos, currentPlayer)
    #####: 1525:		return embargo_action(state, handPos, currentPlayer, choice1);
call    0 never executed
        -: 1526:		
        -: 1527:    case outpost:
        -: 1528:		//int outpost_action(struct gameState *state, int handPos, int currentPlayer, int p, int q)
        -: 1529:
    #####: 1530:		return outpost_action(state, handPos, currentPlayer, p, q);
call    0 never executed
        -: 1531:		
        -: 1532:    case salvager:
        -: 1533:      	//+1 buy
    #####: 1534:      	state->numBuys++;
        -: 1535:			
    #####: 1536:      	if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1537:		{
        -: 1538:	  		//gain coins equal to trashed card
    #####: 1539:	  		state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1540:	  		//trash card
    #####: 1541:	  		discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1542:		}
        -: 1543:			
        -: 1544:      	//discard card
    #####: 1545:      	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1546:      	return 0;
        -: 1547:		
        -: 1548:    case sea_hag:
    #####: 1549:      	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1550:		{
    #####: 1551:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1552:			{
    #####: 1553:	  			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
    #####: 1554:				state->deckCount[i]--;
    #####: 1555:	  			state->discardCount[i]++;
    #####: 1556:	  			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1557:			}
        -: 1558:      	}
    #####: 1559:      	return 0;
        -: 1560:		
        -: 1561:    case treasure_map:
        -: 1562:      	//search hand for another treasure_map
    #####: 1563:      	index = -1;
    #####: 1564:      	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1565:		{
    #####: 1566:	  		if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1567:	    	{
    #####: 1568:	      		index = i;
    #####: 1569:	      		break;
        -: 1570:	    	}
        -: 1571:		}
    #####: 1572:      	if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1573:		{
        -: 1574:	  		//trash both treasure cards
    #####: 1575:	  		discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1576:	  		discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1577:
        -: 1578:	  		//gain 4 Gold cards
    #####: 1579:	  		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1580:	    	{
    #####: 1581:	      		gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1582:	    	}
        -: 1583:				
        -: 1584:	  		//return success
    #####: 1585:	  		return 1;
        -: 1586:		}
        -: 1587:			
        -: 1588:      	//no second treasure_map found in hand
    #####: 1589:      	return -1;
        -: 1590:    }
        -: 1591:	
    #####: 1592:  	return -1;
        -: 1593:}
        -: 1594:
function discardCard called 3003 returned 100% blocks executed 100%
     3003: 1595:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1596:{
        -: 1597:		
        -: 1598:	//if card is not trashed, added to Played pile 
     3003: 1599:	if (trashFlag < 1)
branch  0 taken 3003 (fallthrough)
branch  1 taken 0
        -: 1600:	{
        -: 1601:		//add card to played pile
     3003: 1602:	 	state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        -: 1603:		//printf("made it here");
     3003: 1604:		state->playedCardCount++;
        -: 1605:	}
        -: 1606:
        -: 1607:	//set played card to -1
     3003: 1608:	state->hand[currentPlayer][handPos] = -1;
        -: 1609:
        -: 1610:	//remove card from player's hand
     3003: 1611:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 498 (fallthrough)
branch  1 taken 2505
        -: 1612:	{
        -: 1613:		//reduce number of cards in hand
      498: 1614:		state->handCount[currentPlayer]--;
        -: 1615:	}
     2505: 1616:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 1573 (fallthrough)
branch  1 taken 932
        -: 1617:	{
        -: 1618:		//reduce number of cards in hand
     1573: 1619:		state->handCount[currentPlayer]--;
        -: 1620:	}
        -: 1621:	else 	
        -: 1622:	{
        -: 1623:		//replace discarded card with last card in hand
      932: 1624:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1625:		//set last card to -1
      932: 1626:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1627:		//reduce number of cards in hand
      932: 1628:		state->handCount[currentPlayer]--;
        -: 1629:	}
        -: 1630:
     3003: 1631:	return 0;
        -: 1632:}
        -: 1633:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1634:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1635:{
        -: 1636:	//Note: supplyPos is enum of choosen card
        -: 1637:
        -: 1638:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1639:	if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1640:	{
    #####: 1641:		return -1;
        -: 1642:	}
        -: 1643:
        -: 1644:	//added card for [whoseTurn] current player:
        -: 1645:	// toFlag = 0 : add to discard
        -: 1646:	// toFlag = 1 : add to deck
        -: 1647:	// toFlag = 2 : add to hand
        -: 1648:
    #####: 1649:	if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1650:	{
    #####: 1651:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1652:		state->deckCount[player]++;
        -: 1653:	}
    #####: 1654:	else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1655:	{
    #####: 1656:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1657:		state->handCount[player]++;
        -: 1658:	}
        -: 1659:	else
        -: 1660:	{
    #####: 1661:		state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1662:		state->discardCount[player]++;
        -: 1663:	}
        -: 1664:
        -: 1665:	//decrease number in supply pile
    #####: 1666:	state->supplyCount[supplyPos]--;
        -: 1667:	 
    #####: 1668:	return 0;
        -: 1669:}
        -: 1670:
function updateCoins called 3205 returned 100% blocks executed 82%
     3205: 1671:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1672:{
        -: 1673:	int i;
        -: 1674:
        -: 1675:	//reset coin count
     3205: 1676:	state->coins = 0;
        -: 1677:
        -: 1678:	//add coins for each Treasure card in player's hand
    19230: 1679:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 16025
branch  1 taken 3205 (fallthrough)
        -: 1680:	{
    16025: 1681:		if (state->hand[player][i] == copper)
branch  0 taken 12820 (fallthrough)
branch  1 taken 3205
        -: 1682:		{
    12820: 1683:			state->coins += 1;
        -: 1684:		}
     3205: 1685:		else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 3205
        -: 1686:		{
    #####: 1687:			state->coins += 2;
        -: 1688:		}
     3205: 1689:		else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 3205
        -: 1690:		{
    #####: 1691:			state->coins += 3;
        -: 1692:		}	
        -: 1693:	}	
        -: 1694:
        -: 1695:	//add bonus
     3205: 1696:	state->coins += bonus;
        -: 1697:
     3205: 1698:	return 0;
        -: 1699:}
        -: 1700:
        -: 1701:
        -: 1702://end of dominion.c
        -: 1703:
